To create a detailed sequence diagram for the specified user story using PlantUML, follow the steps below. This diagram will outline the process by which a developer can customize the frontend JavaScript application’s branding—including the brand name, icon, and primary color. Note that the actual implementation details may vary based on the project's specifics, but this serves as a general guide.

```plantuml
@startuml
participant Developer as dev
participant "Frontend Application" as frontend
participant "Branding API" as api
participant "Configuration Service" as config
participant "Storage" as storage

dev -> frontend: Access Branding Customization Page
activate frontend

frontend -> api: Request Current Branding Settings
activate api

api -> config: Retrieve Branding Settings
activate config

config -> storage: Get Stored Branding Information
activate storage
storage --> config: Branding Information
deactivate storage

config --> api: Branding Settings
deactivate config

api --> frontend: Current Branding Settings Displayed
deactivate api

dev -> frontend: Input New Brand Name, Icon, \nand Primary Color
activate frontend

frontend -> api: Submit Branding Update
activate api

api -> config: Update Branding Settings
activate config

config -> storage: Store New Branding Information
activate storage
storage --> config: Confirmation
deactivate storage

config --> api: Update Confirmation
deactivate config

api --> frontend: Display Update Success
deactivate api

frontend --> dev: Confirmation of Branding Customization
deactivate frontend
@enduml
```

Explanation of the Diagram Steps:
1. **Developer Access**: The developer accesses the Branding Customization page on the frontend JavaScript application.
2. **Initial Branding Settings Request**: The frontend requests the current branding settings from the Branding API.
3. **Branding Settings Retrieval**: The Branding API retrieves the current branding settings from the Configuration Service, which in turn gets the stored branding information from the Storage (database or file system).
4. **Display Current Settings**: The current branding settings are returned to the frontend and displayed to the developer.
5. **Developer Submits Changes**: The developer inputs the new brand name, icon, and primary color into the form/interface provided by the frontend application.
6. **Submit Branding Update**: The frontend sends the updated branding information to the Branding API.
7. **Update Storage**: The Branding API instructs the Configuration Service to update the branding settings, which then stores the new information in the Storage.
8. **Update Confirmation**: Upon successful update, a confirmation of the branding customization is displayed to the developer through the frontend application.

This sequence diagram focuses on the interactions between the developer, frontend application, API, and backend services required to customize the branding of frontend JavaScript applications as described in the user story.