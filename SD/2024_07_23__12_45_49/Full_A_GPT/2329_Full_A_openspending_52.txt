Given the complexity of comprehensively implementing a sequence diagram for the described user story in PlantUML without seeing the explicit architecture or API design of the OpenSpending platform, I'll outline a simplified version to address the user story. This sequence diagram will capture the basic interaction between the API User (who wants to customize the embedded OpenSpending viewer) and the OpenSpending system (API and Viewer). It involves making a customization request through the API, which then processes this request to update the viewer settings.

This diagram assumes a basic API where users can send customization settings for the Viewer, and then those settings are applied to the Viewer. Please consider this as a generic example, as implementation details might significantly vary based on the actual API and Viewer design.

```plantuml
@startuml
participant "API User" as User
participant "OpenSpending API" as API
participant "Viewer Configuration" as Config
participant "Viewer" as Viewer

User -> API : Send Viewer Customization Request\n(brand name, icon, primary color)
API -> Config : Update Viewer Settings\n(brand name, icon, primary color)
Config --> API : Success Confirmation
API -> Viewer : Apply Customization Settings
Viewer --> API : Customization Applied
API --> User : Customization Success Message

@enduml
```

### Explanation:
1. **API User to OpenSpending API:** The user sends a request to the OpenSpending API to customize the viewer. This request includes the desired customizations such as brand name, icon, and primary color.

2. **OpenSpending API to Viewer Configuration:** The API processes this request and communicates with the viewer's configuration system to update the settings as per the user's request.

3. **Viewer Configuration to OpenSpending API:** The configuration system sends a success confirmation back to the API, indicating that the customization settings have been updated successfully.

4. **OpenSpending API to Viewer:** The API then instructs the viewer to apply these updated customization settings.

5. **Viewer to OpenSpending API:** The viewer acknowledges that the customization has been applied.

6. **OpenSpending API to API User:** Finally, the API sends a success message back to the user, confirming that the viewer has been successfully customized with the requested branding.

Remember, the actual implementation might need additional steps and considerations, such as authentication and authorization, error handling, and the specifics of how the viewer applies the settings.