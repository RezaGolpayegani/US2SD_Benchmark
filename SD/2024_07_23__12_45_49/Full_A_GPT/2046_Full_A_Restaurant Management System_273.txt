Creating a detailed sequence diagram for the specific user story: "As a waiter, I want to check the orders in a time order," involves outlining the interactions between the waiter, the system interface, and the backend system, focusing on the process of retrieving and displaying orders by their time. Below is a sequence diagram expressed in PlantUML format to illustrate these interactions.

```plantuml
@startuml
participant Waiter
participant "UI Interface" as UI
participant "Server" as Server
participant "Database" as DB

title Waiter Checks Orders in Time Order Sequence

Waiter -> UI : Select "View Orders"
UI -> Server : Request orders by time
Server -> DB : Query orders sorted by time
DB --> Server : Return sorted orders
Server --> UI : Display orders in time order
UI --> Waiter : Show orders on screen

@enduml
```

### Explanation:
1. **Waiter**: Initiates the action by selecting an option to view orders, likely through a graphical user interface on a tablet or computer.
2. **UI Interface**: This represents the frontend system that the waiter interacts with. It sends a request to the server to fetch orders sorted by the time they were made.
3. **Server**: Acts as an intermediary, processing the request from the UI. It formulates a database query to retrieve order information.
4. **Database**: Stores all order data. Upon receiving a query from the server, it returns the orders sorted based on the timestamp or any time-related field.
5. **Back to Server**: The server receives the sorted order data.
6. **Back to UI Interface**: The server sends the sorted order data back to the frontend.
7. **Back to Waiter**: Finally, the orders, sorted by time, are displayed to the waiter through the UI interface.

This sequence diagram is simplified to focus on the main interactions for the user story. Depending on the project requirements, additional steps like error handling, authentication, and more detailed interactions (like filtering or updating orders) could also be considered and added to the sequence diagram.