Creating a detailed Sequence Diagram for the specified user story involves illustrating the interactions between the dataset developer, the version control system, the app, and potentially other components required for separating the interface from the implementation of a dataset type. Since PlantUML code does not render here, I will provide the PlantUML source code that you can use in your favorite PlantUML editor or viewer.

```plantuml
@startuml
participant "Dataset Developer" as Developer
participant "Version Control System" as VCS
participant "Dataset Interface Repository" as InterfaceRepo
participant "Dataset Implementation Repository" as ImplRepo
participant "App" as Application

== Interface Separation Process ==
Developer -> VCS: Checkout latest dataset type code
note right of Developer: Review and define\ninterface for dataset type
Developer -> InterfaceRepo: Commit interface code
activate InterfaceRepo
InterfaceRepo -> VCS: Create new interface version
deactivate InterfaceRepo

== Implementation ==
note over Developer: Implement functionality\nbased on the interface
Developer -> ImplRepo: Commit implementation code
activate ImplRepo
ImplRepo -> VCS: Create new implementation version
deactivate ImplRepo

== Integration ==
Developer -> VCS: Tag and release new dataset type version
VCS -> Application: Notify new version availability
Application -> VCS: Pull interface
Application -> VCS: Dynamically link to implementation at runtime

@enduml
```

### Explanation of the Sequence Diagram:

- **Interface Separation Process**: The dataset developer starts by checking out the latest code for the dataset type from the version control system. After reviewing the current setup, they define a clear interface for the dataset type. This interface code is then committed to a separate repository dedicated to dataset interfaces.

- **Implementation**: With the interface defined, the developer proceeds to implement the functionality according to the defined interface. This implementation code is committed to a different repository meant for dataset implementations. This separation effectively decouples the how from the what, allowing for dynamic linking at runtime.

- **Integration**: Once the interface and implementation are finalized, the dataset developer tags and releases the new version of the dataset type through the version control system. The application, in turn, is notified of the new version availability. It then pulls the interface for compilation and dynamically links to the implementation at runtime, ensuring that the app can adapt to changes in dataset implementations without requiring recompilation.

This sequence diagram provides a high-level overview of separating the interface from the implementation of a dataset type for a dataset developer within the context of an advanced dataset management and version control system.