Creating a detailed sequence diagram for the specific user story "As a restaurant manager, I want to keep track of occupancy, so that I can think about customer part satisfaction." involves illustrating the interactions among different system components to accomplish this functionality. Below is a PlantUML code snippet to generate such a sequence diagram.

```plantuml
@startuml
participant "Restaurant Manager" as manager
participant "Frontend Interface" as frontend
participant "Backend Server" as backend
participant "Database" as db

manager -> frontend : Selects the option to view occupancy
frontend -> backend : Requests current occupancy data
activate backend

backend -> db : Queries occupancy data
activate db
db --> backend : Returns occupancy data
deactivate db

backend --> frontend : Sends the occupancy data
deactivate backend

frontend --> manager : Displays occupancy data
manager -> frontend : Analyzes occupancy trends
frontend -> backend : Requests historical occupancy data
activate backend

backend -> db : Queries historical occupancy data
activate db
db --> backend : Returns historical data
deactivate db

backend --> frontend : Sends the historical occupancy data
deactivate backend

frontend --> manager : Displays historical occupancy trends
@enduml
```

This sequence diagram outlines the steps a restaurant manager would take to view and analyze occupancy in the restaurant. It covers the interaction from the initial request through the frontend interface (likely a web or mobile application) to the retrieval of occupancy data from the database, and finally, visualizing this data for the manager.

It starts with the manager selecting the option to view the current occupancy of the restaurant. The frontend application communicates this request to the backend server, which then queries the database for the current occupancy data. Once retrieved, this data is sent back through the backend to the frontend and presented to the manager.

Additionally, for a deeper analysis, the manager requests historical occupancy data. This process is similar, involving backend and database interactions to fetch and return the requested data. This historical data allows the manager to spot trends, make informed decisions on customer satisfaction initiatives, and possibly adjust staffing or seating arrangements accordingly. 

The diagram uses PlantUML notation and assumes a simplified view of the interactions between the user (manager), frontend application, backend server, and database. Adjustments may be needed based on the specifics of the technology stack and architecture of the restaurant management system.