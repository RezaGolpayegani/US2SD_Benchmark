Given your request, I'll outline a PlantUML sequence diagram for the scenario of a library member wanting to automatically calculate the fines for delayed returns. This scenario involves the member, the library system (including its fine calculation service), and potentially a payment interface if the fine is confirmed and to be paid immediately. 

Please note, specific implementation details such as method names or additional involved classes (e.g., `Database`, `NotificationService`) might vary depending on your actual system design, and some simplifications are made for clarity.

```plantuml
@startuml
participant MemberUI as Member
participant LibrarySystem as System
participant FineCalculationService as FineCalc
participant Database as DB
participant PaymentService as Payment

Member -> System: requestFineCalculation(bookID, returnDate)
activate System

System -> FineCalc: calculateFine(returnDate, dueDate)
activate FineCalc

FineCalc -> DB: getBookDueDate(bookID)
activate DB
DB --> FineCalc: return dueDate
deactivate DB

FineSet -> System: return fineDetails
deactivate FineCalc

System -> Member: showFine(fineDetails)
Member --> System: confirmPayment()
activate Payment
System -> Payment: processFinePayment(fineDetails)
Payment -> System: paymentConfirmation()

System --> Member: showPaymentConfirmation()
deactivate System
@enduml
```

### Explanation:
1. **MemberUI as Member**: The user interface through which the library member interacts with the system. It initiates the sequence by requesting the fine calculation for delayed returns.

2. **LibrarySystem as System**: Acts as the intermediary controller that processes the member's request and orchestrates the flow of data between the fine calculation service, database, and eventually the payment service, if needed.

3. **FineCalculationService as FineCalc**: This is the business logic layer responsible for calculating the fine based on the return date and the due date of the book. It might involve complex logic depending on the library's rules regarding fines.

4. **Database as DB**: Represents the database access layer. It's queried to fetch the due date of the returned book, which is required to calculate the fine.

5. **PaymentService as Payment**: This optional step comes into play if the member decides to immediately pay the fine. It handles the actual financial transaction.

This sequence diagram provides an abstract overview of how a member could automatically calculate fines for delayed returns in a Comprehensive Library Management System. The exact implementation details could differ based on the specific requirements and technologies used.