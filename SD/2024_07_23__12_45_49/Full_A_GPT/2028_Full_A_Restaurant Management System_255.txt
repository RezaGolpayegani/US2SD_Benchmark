Creating a detailed sequence diagram for the user story "As a restaurant manager, I want to see employee information" involves illustrating the interaction between different system components and actors to fulfill this requirement. Below is a PlantUML code representation of how such a sequence could be visualized. This example assumes the manager accesses the system through a web UI, communicates with a backend server, which then queries a database to retrieve employee information.

```plantuml
@startuml
actor Manager as M
participant "Web UI" as W
participant "Backend Server" as B
database "Database" as D

M -> W: Requests employee information
activate W
W -> B: Get employee information
activate B
B -> D: Query employee information
activate D
D --> B: Employee information
deactivate D
B --> W: Employee details
deactivate B
W --> M: Display employee information
deactivate W

@enduml
```

In this sequence:

1. **Manager (Actor):** Initiates the process by requesting to see employee information, usually by performing an action in the UI, like clicking on a "View Employee Information" option.

2. **Web UI (Participant):** Represents the frontend interface where the manager interacts with the system. It captures the request and forwards it to the backend server.

3. **Backend Server (Participant):** Acts as the intermediary that processes the request from the Web UI. It handles the logic to fetch the required information from the database.

4. **Database (Participant):** Stores all employee information and processes queries from the backend server. It returns the requested information back to the server.

This sequence diagram is a high-level representation and can be further detailed depending on specific requirements, such as the fields of employee information to be displayed (e.g., name, position, contact info), how authentication and authorization are handled, and whether any intermediate services (like caches) are involved in the process.