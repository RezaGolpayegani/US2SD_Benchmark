For a request as specific as creating a sequence diagram in Plant UML format for the scenario where a restaurant employee receives a notification message when the customer places an order, we'll need to imagine a simplified process of how this interaction might take place within a Restaurant Management and Operations System. 

Below is a basic sequence diagram in PlantUML format illustrating this process. This example assumes:

1. The customer places an order through a customer-facing UI (perhaps a web or mobile application).
2. The order is sent to the server.
3. The server processes the order and saves it to the database.
4. A notification is generated and sent to the restaurant employee's module/interface.

Here's how you might represent that in PlantUML:

```plantuml
@startuml
participant Customer_UI as Customer
participant Server
database DB
participant "Notification System" as NS
participant Employee_UI as Employee

Customer -> Server : Place Order
activate Server

Server -> DB : Save Order Details
activate DB
DB --> Server : Confirmation
deactivate DB

Server -> NS : Generate Order Notification
activate NS
NS --> Server : Notification Generated
deactivate NS

Server -> Employee_UI : Send Notification
activate Employee_UI
Employee_UI --> Server : Acknowledge
deactivate Employee_UI

deactivate Server
@enduml
```

This sequence diagram outlines:
- The Customer places an order which is sent to the Server.
- The Server then communicates with the Database (DB) to save the order details.
- Upon confirmation from the DB, the Server requests the Notification System to generate an order notification.
- The Notification System sends a notification generated confirmation to the Server.
- Finally, the Server sends the order notification to the Employee's interface/UI, where the notification is acknowledged.

Please note, for implementing this in a real-world scenario, details may vary depending on the actual system architecture, technology stack, and requirements. This example provides a basic structural overview but does not cover error handling, security considerations, or other more complex aspects of system interaction which would be important in a real implementation.