Given the complexity and multidimensional aspects of the functionality described in the Digital Archive Management Enhancement Project, creating a sequence diagram to cover the process of a researcher searching all files by keyword involves several components. This interaction involves the researcher, the search interface, authentication system, file management service, and the database system that houses the metadata and files. 

Below is a PlantUML code sequence diagram illustrating the process:

```plantuml
@startuml
actor Researcher as r
participant "Search Interface" as si
participant "Authentication System" as auth
participant "File Management Service" as fms
database "Archive Database" as db

r -> si: Enter search keyword
si -> auth: Validate researcher credentials
activate auth
auth --> si: Credentials valid
deactivate auth

si -> fns: Request files by keyword
activate fms
fms -> db: Fetch metadata matching keyword
activate db
db --> fms: Return metadata of files
deactivate db
fms --> si: Provide files information
deactivate fms
si --> r: Display search results
@enduml
```
This diagram captures the basic interaction flow:
1. The **Researcher** enters a search keyword into the **Search Interface**.
2. The **Search Interface** requests validation of the researcher's credentials from the **Authentication System**.
3. Upon successful validation, the **Search Interface** then requests the **File Management Service** to find files by the keyword.
4. The **File Management Service** queries the **Archive Database** for metadata that matches the keyword.
5. The **Archive Database** returns the metadata of files that match the search criteria.
6. The **File Management Service** then sends this information back to the **Search Interface**.
7. Finally, the **Search Interface** displays the search results to the **Researcher**.

This sequence diagram exemplifies a simple search flow based on the information provided. Yet, it's important to note that the detailed implementation might require additional elements such as error handling, pagination of search results, access restriction checks, and more, depending on the specific requirements and the system architecture.