Below is a detailed sequence diagram in PlantUML format, illustrating the process for a data publishing user to edit the model of data already imported, in order to fix bugs or make enhancements in the API built for their data as part of the OpenSpending Enhancement Project. Note that some simplifications are made for clarity and brevity.

```plantuml
@startuml
actor User as user
participant "User Interface" as UI
participant "API Server" as API
participant "Database" as DB
participant "Data Model Service" as DMS
participant "Data Validation Service" as DVS

user -> UI : Request to edit data model
UI -> API : GET /data_models/:id/edit
API -> DB : Fetch data model details
DB -> API : Return data model details
API -> UI : Display data model form
user -> UI : Submit edited data model
UI -> API : PUT /data_models/:id
API -> DMS : Validates new data model structure
DMS -> API : Respond with validation result

alt If data model validation is successful

  API -> DB : Update data model in DB
  DB -> API : Confirm update success
  API -> DVS : Initiate data re-validation
  DVS -> DB : Re-validate existing data against new model
  DB -> DVS : Return re-validation results
  DVS -> API : Inform about data re-validation status
  API -> UI : Notify user of successful update & re-validation
  
  else If data model validation fails
  
  API -> UI : Respond with error message
  UI -> user : Display error and request corrections
  
end

@enduml
```

This sequence diagram illustrates the steps involved from the user's perspective to edit an existing data model on the OpenSpending platform. Here's a brief rundown of the flow:

1. **User Request to Edit**: The user initiates a request to edit the data model of already imported data through the platform's user interface.
2. **Form Display**: The user interface requests the details of the data model to be edited from the backend API, which, in turn, fetches the model's details from the database and displays them to the user.
3. **Submit Edited Model**: The user submits the edited model through the interface, which sends the updated information back to the API.
4. **Data Model Validation**: The API forwards the edited data model to the Data Model Service for structural validation.
5. **Validation Results Handling**:
   - If the new data model structure is valid, the API proceeds to update the model in the database and initiates a re-validation of existing data against the new model through the Data Validation Service.
   - If the validation fails, the API sends an error message back to the user interface, which prompts the user to make necessary corrections.
6. **Update & Re-validation Confirmation**: For a successful update and re-validation, the user is notified; for failures at any stage, appropriate error handling and messaging guide the user to rectify issues.

Keep in mind, the actual implementation details for the OpenSpending Enhancement Project may vary, and this sequence assumes a rather straightforward process for updating a data model and validating the datasets against the new model schema.