To create a sequence diagram in PlantUML for the described user story, we need to detail the interactions between the actors and the system components involved in adding and removing individuals from deposit groups. This process involves the Digital Records Archist (the actor), User and Group Management component, and potentially a database or storage system where the group information is maintained. 

Below is a basic representation of how these interactions could be visualized in a sequence diagram. Note that to run PlantUML code and generate diagrams, you'll need access to a PlantUML environment or tool like an online editor or an IDE plugin that supports it.

```plantuml
@startuml
actor Archivist as "DigitalRecords Archivist"
participant "User & Group Management" as UGM
database "Data Storage" as DS

== Add a Person to a Deposit Group ==
Archivist -> UGM : AddPersonToGroup(personId, groupId)
activate UGM
UGM -> DS : CheckGroupExists(groupId)
activate DS
DS --> UGM : GroupExistsResult
deactivate DS

UGM -> DS : CheckPersonNotInGroup(personId, groupId)
activate DS
DS --> UGM : PersonNotInGroupResult
deactivate DS

alt If GroupExists and PersonNotInGroup
    UGM -> DS : AddPersonToGroup(personId, groupId)
    activate DS
    DS --> UGM : AdditionSuccess
    deactivate DS
    UGM --> Archivist : SuccessMessage("Person added")
else If GroupDoesNotExist
    UGM --> Archivist : ErrorMessage("Group does not exist")
else If PersonAlreadyInGroup
    UGM --> Archact: ErrorMessage("Person already in group")
end

== Remove a Person from a Deposit Group ==
Archivist -> UGM : RemovePersonFromGroup(personId, groupId)
activate UGM
UGM -> DS : CheckGroupExists(groupId)
activate DS
DS --> UGM : GroupExistsResult
deactivate DS

UGM -> DS : CheckPersonInGroup(personId, groupId)
activate DS
DS --> UGM : PersonInGroupResult
deactivate DS

alt If GroupExists and PersonInGroup
    UGM -> DS : RemovePersonFromGroup(personId, groupId)
    activate DS
    DS --> UGM : RemovalSuccess
    deactivate DS
    UGM --> Archivist : SuccessMessage("Person removed")
else If GroupDoesNotExist
    USM --> Minority : ErrorMessage("Group does not exist")
else If PersonNotInGroup
    DS --> UGM: ErrorMessage("Person not in group")
    deactivate DS
    UGM --> Archivist : ErrorMessage("Person not in group")
end

@enduml
```

This diagram simplifies the process to fit within the scope of the user story. Essential considerations in a real-world application might include error handling, user authentication, and authorization checks, which would further complicate the sequence but are beyond the scope of this simplified example.

Remember that the diagram assumes the existence of a backend "Data Storage" system capable of managing groups and memberships, as well as a "User & Group Management" component in the EDRMS that processes the archivist's requests. Your actual system architecture may require adjustments to this model.