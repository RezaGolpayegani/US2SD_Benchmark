Creating a detailed sequence diagram for the specified user story requires understanding the interactions among the system components when an app developer relies on a dataset type's interface, and the corresponding implementation is injected at runtime. Below is a PlantUML code snippet that visualizes this process.

```plantuml
@startuml
participant "App Developer" as developer
participant "App Code" as appcode
participant "Dataset Type Interface" as dsinterface
database "Dataset Implementation Registry" as dsregistry
participant "Runtime Environment" as runtime
participant "Dataset Implementation" as dsimpl

developer -> appcode : Defines dependency on\nDataset Type Interface
appcode -> dsinterface : References Interface

activate runtime
runtime -> dsregistry : Query for Implementation\nbased on Interface
dsregistry --> runtime : Return Implementation Details

runtime -> dsimpl : Inject Implementation at Runtime
deactivate runtime

dsimpl -> appcode : Provide Dataset Functionality
appcode -> developer : Executes with Injected Implementation

@enduml
```

### Explanation:

1. **App Developer to App Code**: The app developer starts by defining a dependency in their application code that references a dataset type interface, indicating that the app needs a certain dataset functionality but does not specify which implementation to use.

2. **App Code to Dataset Type Interface**: The app code references the dataset type interface directly. This step is about the app's code being aware only of the interface and not the concrete implementation.

3. **Runtime Environment Activated**: The system's runtime environment now plays a crucial role in ensuring that the right implementation is provided for the used interface.

4. **Runtime Environment to Dataset Implementation Registry**: At runtime, the environment queries a registry (or a similar service) that holds information about available dataset implementations and their corresponding interfaces.

5. **Dataset Implementation Registry to Runtime Environment**: The registry returns the details of the implementation that should be used for the requested interface. This decision can be based on various factors, including app context, configuration settings, or deployment parameters.

6. **Runtime Environment to Dataset Implementation**: With the implementation details retrieved, the runtime environment dynamically injects the dataset implementation into the running application where the dataset interface was referenced.

7. **Dataset Implementation to App Code**: Once injected, the dataset implementation provides the functionality defined by the interface to the app code. This process is transparent to the app developer, who configured the app to depend solely on the dataset interface.

8. **App Code to App Developer**: The application executes using the injected dataset implementation, allowing the app developer to achieve their goal of depending only on the dataset type interface with the actual implementation being resolved and injected at runtime.

This flow demonstrates the separation of interface and implementation, promoting flexibility, modularity, and ease of testing in application development, particularly within ecosystems requiring dynamic dataset management and version control.