Creating a detailed sequence diagram for the given user story: "As an admin, I want to annotate news video segments and extract a topic for each segment," involves illustrating the interactions between different system components and the admin in a sequential order to achieve the desired outcome.

Below is a PlantUML code snippet reflecting these interactions. The sequence demonstrates the admin selecting a video, segmenting the video, annotating segments, extracting topics from annotations, and finally updating the system with the new data. 

```plantuml
@startuml
autonumber
actor Admin
participant "Video Management System" as VMS
participant "Segmentation Tool" as Segmenter
participant "Annotation Tool" as Annotator
participant "Topic Extraction Engine" as TextExtractor
participant "Database" as DB

Admin -> VMS: Select video
VMS -> Segmenter: Send video
Segmenter -> Segmenter: Run segmentation algorithm
Segmenter --> Admin: Display segments
Note right of Admin: Admin reviews segments\nand selects one for annotation
Admin -> Annotator: Annotate segment
Annotator -> Annotator: Save annotation
Note over Annotator: Annotation includes\ntime codes and text
Annotator -> TextExtractor: Extract topic from annotation text
TextExtractor -> TextExtractor: Analyze text\nIdentify topic
TextExtractor --> Annotator: Return identified topic
Annotator -> Admin: Display identified topic
Admin -> Admin: Verify/Adjust identified topic
Admin -> Annotator: Confirm annotation and topic
Annotator -> DB: Update segment with annotation & topic
DB --> Admin: Confirmation of update

@enduml
```

This PlantUML sequence diagram encapsulates the process flow as described in the user story, including video selection, segmentation, annotation, topic extraction, and database updating steps. Each of these steps involves interactions between the admin and various system components, ensuring that the process is both efficient and manageable.