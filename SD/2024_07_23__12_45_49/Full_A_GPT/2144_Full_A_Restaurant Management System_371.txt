Creating a detailed sequence diagram for the User Story "As an employee, I want to see the food order queue" involves illustrating the interactions between the systems and components from the moment an employee (for this example, a cook) requests to view the food order queue until the system presents the orders. Here's a simplified version of what this sequence might look in PlantUML format:

```plantuml
@startuml
actor Cook
participant "UI Layer" as UI
participant "API Gateway" as API
participant "Order Management Service" as OrderService
participant "Database" as DB

Cook -> UI : Requests order queue
UI -> API : GET /orders/queue
API -> OrderService : Retrieve order queue
OrderService -> DB : Query pending orders
DB -> OrderService : Return orders
OrderService -> API : Return order queue data
API -> UI : Display order queue
UI -> Cook : Order queue shown
@enduml
```

This sequence diagram walks through the following steps:

1. **Cook Requests Order Queue**: The process begins with the cook (or any employee) initiating a request to see the food order queue through the User Interface (UI).

2. **UI to API Gateway**: The UI layer communicates with the backend through an API Gateway, sending a request to get the current queue of food orders.

3. **API Gateway to Order Management Service**: The API Gateway forwards the request to the Order Management Service, which is responsible for handling operations related to orders.

4. **Query Database**: The Order Management Service retrieves the information by querying the database for pending (or unfulfilled) orders.

5. **Database Returns Orders**: The database responds with a list of current pending orders.

6. **Order Management Service Returns Data**: With the database's response, the Order Management Service processes the data perhaps applying any necessary formatting or filtering based on the employee's role or request parameters.

7. **API Gateway to UI**: The API Gateway receives the order queue data from the Order Management Service and forwards it to the UI layer.

8. **UI Presents Order Queue**: Finally, the UI layer presents the food order queue to the cook, completing the process.

This diagram assumes the system is designed with microservices architecture in mind, where each functionality (like order management) is separated into its microservice. However, the actual implementation can vary based on specific project requirements and architecture decisions.