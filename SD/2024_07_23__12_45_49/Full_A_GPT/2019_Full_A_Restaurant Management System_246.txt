Creating a detailed sequence diagram for the user story "As a restaurant manager, I want to know inventory details" requires illustrating how different components of the system interact to fulfill this requirement. Given the complexity and brevity of PlantUML syntax, the following diagram will depict the flow from the moment the restaurant manager decides to check inventory details until the information is displayed.

```plantuml
@startuml
participant Manager as manager
participant "Management Interface" as interface
participant "Backend System" as backend
database "Database" as db

manager -> interface : Request inventory details
interface -> backend : Query inventory data
backend -> db : Fetch inventory details
db -> backend : Return inventory data
backend -> interface : Process and format data
interface -> manager : Display inventory details

@enduml
```

This sequence diagram represents the interaction between the restaurant manager, the management interface (presumably a part of the Restaurant Management and Operations System), the backend system, and the database. 

- **Manager**: Initiates the process by requesting to view inventory details.
- **Management Interface**: Acts as the bridge between the manager and the backend system. It receives the manager's request and forwards it to the backend.
- **Backend System**: Processes requests from the management interface. It queries the database for inventory details.
- **Database**: Stores inventory information and returns it upon request.

The manager makes a request to the management interface for inventory details. The interface then communicates this request to the backend system, which, in turn, queries the database for the required information. The database responds with the inventory details which are then parsed and formatted by the backend system. Finally, the management interface presents this information to the restaurant manager in a readable and actionable format.
  
This simplified flow captures the essence of the user story within the context of the provided project description. To adapt this to real-world scenarios, consider expanding the diagram to include error handling, authentication steps, and potentially more detailed interactions based on specific inventory attributes or system capabilities.