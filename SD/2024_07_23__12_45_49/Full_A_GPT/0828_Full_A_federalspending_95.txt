Given the project description and the specific user story you've shared, here is a detailed sequence diagram in Plant UML format to visualize the interaction flow. The sequence diagram will focus on how a FABS user interacts with the system to see the correct status labels on their Submission Dashboard to view their submission history accurately.

```plantuml
@startuml
actor "FABS User" as user
participant "Submission Dashboard" as dashboard
participant "Broker Backend\nService" as backend
participant "Database" as db

user -> dashboard : Accesses Submission Dashboard
dashboard -> backend : Request to retrieve\nsubmission history
backend -> db : Query submission\nstatus labels
db -> backend : Return submission\nstatuses
backend -> dashboard : Display correct\nstatus labels
dashboard -> user : Shows submission history\nwith status labels

@enduml
```

This diagram illustrates the process starting from the FABS user accessing their Submission Dashboard, which triggers a series of interactions between the dashboard, the Broker backend service, and the database. The core sequence centers around retrieving and displaying the correct status labels for each submission in the user's history, ensuring that the FABS user can quickly and accurately assess their submission status.

Please note, to render this PlantUML sequence diagram, you'll need to use a PlantUML environment or tool that supports PlantUML syntax.