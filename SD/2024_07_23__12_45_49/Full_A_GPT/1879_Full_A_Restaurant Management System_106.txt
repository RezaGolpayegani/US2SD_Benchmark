To create a sequence diagram for this user story using PlantUML, follow the steps detailed below. This sequence diagram will outline the interactions between the manager, the Restaurant Management and Operations System, and the subsystems involved in checking the cost of ingredients to decide on the price of a meal.

```plantuml
@startuml
participant Manager
participant "Management Interface" as MI
participant "Inventory Management Subsystem" as IMS
participant Database

Manager -> MI : select "Ingredient Costs"
activate MI

MI -> IMS : queryIngredientCosts()
activate IMS

IMS -> Database : fetchIngredientsCost()
activate Database
Database --> IMS : ingredientCosts
deactivate Database

IMS --> MI : displayCosts(ingredientCosts)
deactivate IMS

MI --> Manager : showIngredientCosts(ingredientCosts)
deactivate MI

Manager -> MI : analyzeCosts()
activate MI
MI -> Manager : recommendPricing()
deactivate MI

@enduml
```

### Breakdown:
1. **Manager selects "Ingredient Costs"**: This step begins when the manager interacts with the Management Interface of the Restaurant Management and Operations System to check the cost of ingredients.

2. **Management Interface queries Ingredient Costs**: The Management Interface sends a request to the Inventory Management Subsystem to retrieve the cost of ingredients.

3. **Inventory Management Subsystem fetches costs**: The Inventory Management Subsystem communicates with the Database to pull the current costs of the ingredients.

4. **Database provides ingredient costs**: The Database returns the cost information for the requested ingredients to the Inventory Management Subsystem.

5. **Costs displayed to the Manager**: The Inventory Management Subsystem sends this cost information back to the Management Interface, which then displays it to the Manager.

6. **Manager analyzes costs**: With the costs of ingredients at hand, the Manager uses the Management Interface to analyze these costs in the context of meal pricing.

7. **System recommends pricing**: Based on the costs and possibly other factors (like competitor pricing, profit margins, etc.), the Management Interface offers recommendations on meal pricing to the Manager.

This sequence diagram describes a simplified flow of how a manager in a restaurant could use the Restaurant Management and Operations System to check the cost of ingredients and decide on the price of a meal. The chosen technology stack mentioned in the project description supports these operations with a responsive interface (React.js/Angular), server-side logic (Node.js/Express), and a reliable database (MongoDB/PostgreSQL) for storing and retrieving data.