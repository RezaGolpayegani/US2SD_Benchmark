Creating a detailed UML sequence diagram involves showing how system components interact over time to complete the process of a parent checking if they have made all the necessary payments. Below is a basic outline in PlantUML format that you can customize or expand based on specific requirements or technologies used in the Camp Management & Communication Platform.

This sequence diagram will illustrate the flow beginning with a parent logging in, navigating to the payments section, and ending with the display of payment status.

```plantuml
@startuml
participant Parent as parent
participant "Authentication System" as auth
participant "Parent Dashboard" as dashboard
participant "Payment Service" as paymentService
participant "Database" as db

parent -> auth : Login()
activate auth
auth -> db : Validate credentials
activate db
db --> auth : Credentials valid
deactivate db
auth --> parent : Login successful
deactivate auth

parent -> dashboard : Navigate to payments section
activate dashboard
dashboard -> paymentService : Request payment status(userID)
activate paymentService
payment service -> db : Get payment records(userID)
activate db
db --> paymentService : Return payment records
deactivate db
paymentService --> dashboard : Display payment status
deactivate paymentService
dashboard --> parent : Show payment status
deactivate dashboard

@enduml
```

In this sequence diagram:

- **Parent** initiates the process by logging into the Camp Management & Communication Platform.
- The **Authentication System** validates the parent's credentials against the **Database**.
- Once authenticated, the parent navigates to the payments section within their **Parent Dashboard**.
- The **Parent Dashboard** requests the payment status from the **Payment Service**, providing the unique user ID to identify the parent.
- The **Payment Service** retrieves payment records for the specified parent from the **Database**.
- Finally, the payment status is returned to the **Parent Dashboard**, which displays it to the parent.

This simple sequence diagram provides a straightforward depiction of the interactions involved in checking payment status. Depending on the actual complexity and functionalities of your platform, you might need to add more details, such as error handling, more specific interactions with the payment service, or interactions with other system components.