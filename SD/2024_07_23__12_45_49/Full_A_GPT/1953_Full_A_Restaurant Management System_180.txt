Creating a sequence diagram involves detailing how system components interact to fulfill a specific user story or requirement. Since you're interested in how a manager can see the prices of products using the Restaurant Management and Operations System, I will outline a sequence diagram in PlantUML format for this scenario. Bear in mind, we're simplifying the interaction process for readability and assume that authentication and permissions checks are done beforehand.

```plantuml
@startuml
actor Manager
participant "UI Dashboard" as Dashboard
participant "Backend API" as Backend
participant "Database" as DB

Manager -> Dashboard: Request to view product prices
Dashboard -> Backend: GET /products/prices
activate Backend
Backend -> DB: Fetch prices of products
activate DB
DB --> Backend: Return prices
deactivate DB
Backend --> Dashboard: Product prices data
deactivate Backend
Dashboard --> Manager: Display product prices
@enduml
```

This diagram walks through the following steps:
1. The manager initiates the request to see the prices of products through the UI Dashboard.
2. The Dashboard sends this request to the Backend via a GET request to `/products/prices`.
3. The Backend then queries the Database to fetch the prices of all products.
4. The Database returns the prices of the products back to the Backend.
5. The Backend sends this data back to the Dashboard.
6. Finally, the Dashboard displays the prices of the products to the manager.

This sequence diagram is a basic representation. In a real-world application, there might be several additional steps and interactions, especially concerning authentication, error handling, and formatting the data for presentation. The technology stack highlighted in the project description, including React.js or Angular for the frontend and Node.js with Express for the backend, is well-suited to handle such interactions. MongoDB or PostgreSQL would support storing and retrieving the necessary data, with the choice between the two depending on the project's specific needs for data structure and scalability.