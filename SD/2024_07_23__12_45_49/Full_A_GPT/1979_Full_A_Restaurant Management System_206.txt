Creating a detailed sequence diagram for the given user story, "As a manager, I want to see the working schedule of all waiters," involves several key entities in the Restaurant Management and Operations System such as the Manager Interface, Server Back-end, Database, and Waiters' Schedule Module. Below is a PlantUML code representation of how these entities interact to fulfill the manager's request.

```plantuml
@startuml
actor Manager as mgr
participant "Manager Interface" as UI
participant "Server Back-end" as server
database "Database" as db
participant "Waiters' Schedule\nModule" as schedule

mgr -> UI : Request waiter schedules
UI -> server : Fetch waiter schedules
server -> db : Query waiter schedules
db -> server : Return waiter schedules
server -> UI : Return waiter schedules data
UI -> mgr : Display waiter schedules

@enduml
```

In this sequence diagram, the process starts when the manager requests to see the working schedule of all waiters. This request is made through the Manager Interface, which acts as the front-end component the manager interacts with. The Manager Interface sends this request to the Server Back-end, which processes the request by querying the Database for the waiter schedules. The Database returns the requested schedules back to the Server Back-end, which then sends the data to the Manager Interface. Lastly, the Manager Interface displays the waiter schedules to the manager, completing the request.

This sequence diagram focuses on the high-level interaction between the system components to fulfill the manager's requirement of viewing all waiters' schedules. To implement this feature, developers would need to detail each component's internal workings according to the chosen technology stack (e.g., React.js or Angular for the front end, Node.js with Express for the back end, and MongoDB or PostgreSQL for the database).