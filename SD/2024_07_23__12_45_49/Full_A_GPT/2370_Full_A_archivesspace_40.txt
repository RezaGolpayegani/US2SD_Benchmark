Creating a detailed sequence diagram for the scenario where an archivist doesn't want to inadvertently overwrite someone else's changes to a record that they are editing involves several actors and systems interacting. This PlantUML code outlines a possible sequence where the system checks for concurrent edits before allowing the archivist to save changes to a record. 

```plantuml
@startuml
actor Archivist
entity "Archival Management System" as AMS
database "Record Status Database" as RSD

== Check for Concurrent Edits Before Saving a Record ==

Archivist -> AMS: Request to edit Record [X]
AMS -> RSD: Query last edit timestamp for Record [X]
RSD --> AMS: Last edit timestamp
AMS --> Archivist: Display Record [X] and last edit info
note right: Archivist makes changes to the record

Archivist -> AMS: Attempt to save changes
AMS -> RSD: Check if Record [X] has been edited since last timestamp
alt Record has been edited
    RSD --> AMS: Record [X] has been modified
    AMS --> Archivist: Error Message: Record has been modified by another user
    note right: Archivist reviews the changes or retries later
else Record not edited
    RSD --> AMS: No changes detected
    AMS -> RSD: Update Record [X] with new data and timestamp
    RSD --> AMS: Record [X] updated successfully
    AMS --> Archivist: Success Message: Your changes have been saved
end

@enduml
```

### Explanation:

- **Archivist** initiates the process by requesting to edit a specific record (Record [X]). This implies they are accessing the record for editing purposes.
- **Archival Management System (AMS)** then queries the **Record Status Database** for the last edit timestamp of Record [X] to establish the last known edit state.
- The **Record Status Database** sends the last edit timestamp to the AMS, which is then shown to the Archivist alongside the record. This step is crucial for providing visibility into the last edit made.
- As the Archivist makes changes, they trigger a save request. Before processing this request, the AMS checks with the Record Status Database if any changes have been made to Record [X] since the last known timestamp.
- If the Record Status Database indicates that Record [X] has been modified in the meantime (detected by a timestamp discrepancy or edit flag), the AMS informs the Archivist of this conflict with an error message, suggesting that the record has been modified by another user, preventing accidental overwrites.
- If no concurrent edits were detected, the Record Status Database allows the AMS to update Record [Index] with new data and an updated timestamp. Following this, the AMS confirms the successful update to the Archivist.

This sequence ensures that multiple users can't inadvertently overwrite each other's changes without being made aware of each other's edits, thus preserving data integrity and user contributions.