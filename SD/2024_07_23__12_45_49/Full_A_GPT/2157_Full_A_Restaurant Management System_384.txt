Creating a Sequence Diagram for the specified user story in PlantUML format requires describing the interaction between system components such as the Owner/User, the Frontend Interface, Backend System, Reporting Module, and the Database in a sequential manner. This can help visualize the process an owner goes through to obtain sales report data for better inventory management. Below is a simplified example of such a diagram.

```plantuml
@startuml
actor Owner as owner
participant "Frontend Interface" as frontend
participant "Backend System" as backend
participant "Reporting Module" as reports
database "Database" as db

owner -> frontend : Request sales report
frontend -> backend : API call for sales data
backend -> reports : Query generate sales report
reports -> db : Fetch sales data
db --> reports : Sales data
reports --> backend : Sales report
backend --> frontend : Display sales report data
frontend --> owner : Show sales report
@enduml
```

This diagram outlines the following steps in the process:

1. The Owner requests a report of total sales for items on the menu through the Frontend Interface. This usually happens through a graphical user interface (GUI) where the owner selects the option to generate a sales report.
2. The Frontend Interface makes an API call to the Backend System requesting the needed sales data.
3. The Backend System forwards this request to the Reporting Module, which is responsible for generating sales reports.
4. The Reporting Module queries the Database to fetch the necessary sales data. This may involve aggregating sales information by item, calculating total sales, and so on.
5. The Database returns the requested sales data back to the Reporting Module.
6. The Reporting Module processes this data into a comprehensive sales report and sends it back to the Backend System.
7. The Backend System then sends this report data to the Fronted Interface.
8. Finally, the Frontend Interface displays the sales report to the Owner, completing the process.

This sequence diagram assumes a simplistic workflow and doesn't account for authentication, error handling, or other complexities of real-world systems. Adjustments might be necessary to accommodate specific project requirements or technical constraints.