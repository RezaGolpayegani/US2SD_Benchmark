Creating a detailed sequence diagram for the user story "As a member, I want to add other members as a friend" using PlantUML involves showing the interactions between the user (member), the front end (usually a web interface or mobile application), and the Comprehensive Library Management System (CLMS) backend services. This interaction typically involves searching for a member, sending a friend request, and then handling that request on the receiving member's end. Below is an example PlantUML code to illustrate this process.

```plantuml
@startuml
actor Member1 as "Member #1"
participant "Web Interface" as Web
participant "Server: Friends Management" as FriendServer
database "CLMS Database" as Db
actor Member2 as "Member #2"

== Search for Friend ==
Member1 -> Web: Searches for Member #2
Web -> FriendServer: Request to find Member #2
FriendIBM Internal Use OnlyServer -> Db: Query for Member #2
Db --> FriendServer: Member #2 Data
FriendServer --> Web: Display Member #2 Profile
Web --> Member1: Show Member #2 Profile and Option to Add as Friend

== Send Friend Request ==
Member1 -> Web: Add Member #2 as Friend
Web -> FriendServer: Initiate Add Friend Request
alt If Member #2 Accepts Friend Requests Automatically
    FriendServer -> Db: Update Friends List
    Db --> FriendServer: Confirmation
    FriendServer --> Web: Friend Request Accepted
    Web --> Member1: Notification of Success
else
    FriendServer -> Db: Save Friend Request
    Db --> FriendServer: Request Saved
    FriendServer -> Member2: Notify of Friend Request
    Member2 -> FriendServer: Accepts Request
    FriendServer -> Db: Update Friends List 
    Db --> FriendServer: Friends List Updated
    FriendServer --> Member2: Confirmation of Friendship
    Member2 -> Web: Acknowledgement
    Web --> Member1: Notification of Success
end

@enduml
```

This sequence diagram starts with Member #1 looking to add Member #2 as a friend through the web interface. The server handling friends' management processes the request, interacts with the database to either find Member #2's data for initial viewing or to update the friends list based on the action taken (either automatically accepting friend requests or requiring manual acceptance).

This diagram can be expanded or altered based on specific system requirements, such as if there is a separate service for sending notifications or more complex friend request workflows (like requiring confirmation from both members). Keep in mind, this example assumes a fairly straightforward process for adding friends within the CLMS framework.