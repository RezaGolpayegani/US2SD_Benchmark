To generate a detailed sequence diagram in PlantUML format for the given user story, we will outline the interaction between a library member, the libraryâ€™s front-end interface, back-end server, and database system as they navigate checking the reservation status of a book within the Comprehensive Library Management System (CLMS). This diagram will illustrate the steps taken from the member initiating a request to view a book's reservation status to receiving the status information.

Please note, this PlantUML code outlines a simplified interaction focusing on the key components involved in this process:


```plantuml
@startuml
actor Member as member
participant "Front-end Interface" as frontend
participant "Back-end Server" as backend
database "Database" as database

member -> frontend : Select "Check Reservation Status"
frontend -> backend : Request to retrieve reservation status for book
backend -> database : Query reservation status of book
database --> backend : Return reservation status data
backend --> frontend : Display reservation status (Available/Reserved)
frontend --> member : Show book reservation status

@enduml
```

This sequence diagram starts with the Member deciding to check the reservation status of a book through the system's Front-end Interface. The interface then communicates with the Back-end Server, sending a request to retrieve the reservation status for the specified book. The server processes this request and queries the Database for the book's reservation status. Upon receiving the reservation status data from the Database, the server then sends this information back to the interface, which subsequently displays the reservation status to the Member. 

The statuses displayed may include indications like "Available", "Reserved", or other relevant statuses which indicate whether the book can be borrowed immediately or requires waiting for a reservation period to end. This implementation ensures a straightforward and efficient way for library members to check book availability before visiting the library, enhancing their planning experience and maximizing the utility of the library's resources.

Remember, this is a basic representation and should be adapted to include error handling, security considerations, and any other specific business logic or requirements pertinent to the CLMS project.