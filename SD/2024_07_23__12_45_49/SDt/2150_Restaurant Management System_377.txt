@startuml
participant Employee
participant "Order Management\nSystem (OMS)" as OMS
participant "Inventory System" as Inventory
database "Database" as DB

Employee -> OMS: RequestCurrentOrders()
activate OMS
OMS -> DB: FetchOrders()
activate DB
DB --> OMS: OrdersList()
deactivate DB
OMS --> Employee: ShowOrders(OrdersList)
deactivate OMS

loop For Each Order in OrdersList
  Employee -> OMS: SelectOrder(orderId)
  activate OMS
  OMS -> DB: GetOrderDetails(orderId)
  activate DB
  DB --> OMS: OrderDetails()
  deactivate DB
  OMS --> Employee: DisplayOrderDetails(OrderDetails)
  deactivate OMS
  
  alt If ingredients needed
    Employee -> Inventory: CheckIngredients(OrderDetails)
    activate Inventory
    Inventory -> DB: VerifyStock(OrderDetails)
    activate DB
    DB --> Inventory: StockStatus()
    deactivate DB
    Inventory --> Employee: ShowStockStatus(StockStatus)
    deactivate Inventory
    alt If Stock Low
      Employee -> Inventory: RequestRestock(itemList)
      Inventory -> DB: UpdateStockRequest(itemList)
      DB --> Inventory: RestockConfirmation()
      Inventory --> Employee: DisplayRestockConfirmation()
    end
  end
  
  Employee -> OMS: MarkAsPreparing(orderId)
  OMS -> DB: UpdateOrderStatus(orderId, 'preparing')
  DB --> OMS: StatusUpdated()
  OMS --> Employee: ShowUpdatedStatus('preparing')
end

@enduml