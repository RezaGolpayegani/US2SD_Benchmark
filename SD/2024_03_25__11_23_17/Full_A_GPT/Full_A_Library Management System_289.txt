Below is a simple Plant UML sequence diagram for seeing due date:

```puml
@startuml
autonumber
actor User
participant "Membership System" as MS

User -> MS : Request to see due date
activate MS
MS --> MS : Fetch due date information
MS -> User : Display due date
deactivate MS
@enduml
```
Please note that the above sequence diagram is quite generic and simplified.
Depending on the specifics of your project i.e., what type of member (club, library, website?), where is the due date information stored (database, cloud, local file?), the complexity of security procedures (login, password check?), and so on, the sequence diagram could be much more complicated and include many more participants and steps.

For the instance, a member could first need to log into a system. This could involve several back-and-forths between the user and a login system, and then between the login system and a database. Once the user is confirmed to be a legitimate member, then they could request to see the due date from a membership system. This could involve lookups to a database which are governed by several condition checks. Finally the due date information is then passed back to the membership system which sends it to the member, perhaps via a web interface or a desktop app.