In order to achieve the requested task of creating a sequence diagram in Plant UML, it's necessary to specify in more detail the interactions between the user and the software system, and internals of the software system. Below is the high level description that can be translated into a sequence diagram depending on the specifics of your software system.

```
@startuml
Researcher -> DataPackageHandler: request Data Package
activate DataPackageHandler
DataPackageHandler -> DataBase: get Data Package
activate DataBase
DataBase --> DataPackageHandler: Data Package
deactivate DataBase
DataPackageHandler --> Researcher: Data Package
deactivate DataPackageHandler
Researcher -> Julia: load Data Package in Data Frame
activate Julia
Julia --> Researcher: Data Package loaded in Julia
deactivate Julia
@enduml
```

To explain the above sequence diagram script:

- The Researcher sends a request for a Data Package to the DataPackageHandler object in your software system
- DataPackageHandler then makes a request to the DataBase object for the Data Package
- DataBase in turn responds with the requested Data Package back to the DataPackageHandler
- DataPackageHandler then delivers the Data Package to the Researcher
- The Researcher loads the Data Package into Julia's Data Frame
- Julia affirms to the Researcher that the Data Package has been loaded.

Please note that this is a very simplified sequence diagram script and might need adjustments to mirror your software system precisely. For instance, this script assumes a synchronous operation; however, if your system handles these operations asynchronously, you will need to make changes. Similarly, if loading the data package in Julia involves other system components, you would need to add those to this script. 

If you need more complex behavior to be modeled, e.g., conditionals, loops, or alternative scenarios, please expand your user story to include these details.