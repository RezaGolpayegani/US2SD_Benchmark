Creating a PlantUML sequence diagram to represent the user story of a Digital Records Archivist granting embargo privileges to other repository administrators involves specifying the interactions between different entities or actors involved. This diagram will illustrate the sequence of actions that occur from the moment a Digital Records Archivist decides to grant embargo privileges up to the completion of this process.

Given the complexity of implementing a full system in a single PlantUML script -- and to keep the example focused -- we'll simplify the interactions to focus on the core steps involved in granting embargo privileges. Assume there are interfaces or classes for `DigitalRecordsArchivist`, `RepositoryAdminManagementSystem`, `Permissions`, and `RepositoryAdmin`.

Below is a simplified, illustrative example of how this sequence might be represented in PlantUML format:

```plantuml
@startuml

participant DigitalRecordsArchivist as Archivist
participant RepositoryAdminManagementSystem as AdminSystem
database PermissionsDb as Permissions
participant RepositoryAdmin as Admin

Archivist -> AdminSystem : requestGrantEmbargoPrivileges(AdminID)
activate AdminSystem

AdminSystem -> Permissions : checkCurrentPrivileges(ArchivistID)
activate Permissions

Permissions --> AdminSystem : privilegesDetails
deactivate Permissions

AdminSystem -> Permissions : grantEmbargoPrivileges(AdminID)
activate Permissions

Permissions -> Permissions : updatePrivileges(AdminID, newPrivileges)
Permissions --> AdminSystem : confirmation
deactivate Permissions

AdminSystem --> Archivist : privilegeGrantSuccess(AdminID)
deactivate AdminSystem

@enduml
```

This PlantUML sequence diagram describes the following flow:

1. The `DigitalRecordsArchivist` (Archivist) initiates the process by requesting to grant embargo privileges to a specific `RepositoryAdmin` (a request which is directed to the `RepositoryAdminManagementSystem`).
2. The `RepositoryAdminManagementSystem` checks the current privileges of the `DigitalRecordsArchivist` to confirm if they have the authority to grant embargo privileges. This check is performed against a permissions database or system (`PermissionsDb`), which responds with the privilege details.
3. Assuming the archivist has sufficient privileges, the `RepositoryAdminManagementSystem` then requests to grant embargo privileges to a specified `RepositoryAdmin`. This request is again sent to the `Permissions` system.
4. The `Permissions` system updates the privileges for the specified `RepositoryAdmin`, confirming the update back to the `RepositoryAdminManagementSystem`.
5. Finally, the `RepositoryAdminManagementSystem` confirms to the `DigitalRecordsArchivist` that the embargo privileges have been successfully granted to the specified `RepositoryAdmin`.

This diagram is a simple illustration and might need adjustments based on the specific architectures, technologies, and requirements of the Enhanced Digital Repository Management System (EDRMS) project.