In order to create this sequence diagram, it's important to assume the system architecture and functionalities. Here's an example for a basic situation where the manager sends a request to change the employee schedules to the system.

PlantUML code:

```puml
@startuml
participant "Manager" as M
participant "RestaurantManagementSystem" as RMS
database "EmployeeData" as ED

M -> RMS : Request to Edit Employee Shifts
activate RMS
RMS -> ED : Fetch Employee Data
activate ED
ED --> RMS : Return Employee Data
deactivate ED
RMS --> M : Display Employee Data
deactivate RMS

M -> RMS : Submit Updated Shifts
activate RMS
RMS -> ED : Update Shifts
activate ED
ED --> RMS : Confirmation
deactivate ED
RMS --> M : Display Confirmation 
deactivate RMS
@enduml
```

This simple sequence diagram starts with the manager making a request to edit employee shifts. The Restaurant Management System fetches the employee data from the Employee Data Database. The employee data is returned and displayed to the manager. Then the manager submits the updated shifts to the system. The system updates the shifts in the database which then sends a confirmation. This confirmation is displayed back to the manager. 

Remember to match your system architecture and operations when doing sequence diagrams. Additional checks, operations, or branches can be added according to the real system's complexity.