Sure, below is a basic sequence diagram written in Plant UML code based on your description. Please keep in mind that this is a simplified version, and in a real-world scenario, there may be other objects, actions, interactions, and complexities involved.

```
@startuml
actor Manager
database OrdersDB
entity Waiter1
entity Waiter2

Manager -> OrdersDB: Request Waiters' Daily Orders 
activate OrdersDB

OrdersDB -> Waiter1: Query Daily Orders
activate Waiter1
Waiter1 --> OrdersDB: Return Order Count
deactivate Waiter1

OrdersDB -> Waiter2: Query Daily Orders
activate Waiter2
Waiter2 --> OrdersDB: Return Order Count
deactivate Waiter2

OrdersDB --> Manager: Return Total Orders for Each Waiter
deactivate OrdersDB

@enduml
```

In this sequence diagram:

1. The `Manager` sends a request to `OrdersDB` to fetch the daily orders made by each waiter.

2. `OrdersDB` then sends this request to `Waiter1`.

3. `Waiter1` responds back with the order count.

4. `OrdersDB` again communicates with `Waiter2` and asks for his daily orders.

5. `Waiter2` replies back with his order count.

6. Finally, `OrdersDB` returns the total order counts for each waiter to the `Manager` to analyze their performance.

Kindly, replace "Waiter1" and "Waiter2" with actual waiter IDs or add more waiter entities as per your exact need. This is an illustrative sequence, in a full fledged application, the communication would mostly be between server and database instead of individual waiters.