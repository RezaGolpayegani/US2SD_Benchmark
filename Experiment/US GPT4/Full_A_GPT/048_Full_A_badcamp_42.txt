Creating a sequence diagram involves a detailed understanding of how the system's various components interact with each other. Since specifics of interactions weren't detailed in the prompt, I'll make assumptions that the system contains a user interface (UI), a summit coordinator component that houses the logic for the specific user type, and a database to store the information.

Below is a PlantUML code that outlines a sequence diagram for this user story:

```plantuml
@startuml
actor "Summit Coordinator" as SC
participant "User Interface" as UI
participant "Summit Coordinator Logic" as SCL
database "Database" as DB

SC -> UI : Inputs summit information
UI -> SCL : Sends summit information
SCL -> DB : Store summit information
DB --> SCL : Confirmation of storage
SCL --> UI : Confirmation, update UI
UI --> SC : Show success message
@enduml
```
Brief Explanation:
1. The Summit Coordinator inputs all the basic information of the summit, like the summit's description, venue, date, and time, etc., on the User Interface.
2. The User Interface takes this information and sends it to the system's Summit Coordinator Logic.
3. The Summit Coordinator Logic sends this information to the Database to store it.
4. The Database confirms the successful storage of the information.
5. Summit Coordinator Logic receives the confirmation and requests the User Interface to be updated.
6. The User Interface then displays a success message on the Summit Coordinator's screen.

This sequence diagram makes certain assumptions considering the limitations of the context provided and portrays one of many ways the system may be designed. The actual design might be different based on specifics of the project. 

Remember to replace this simplified diagram with actual interactions, error handling, and other minute details in a real-world scenario.