To create a detailed Sequence Diagram for the user story "As a manager, I want to see employee expenses" using PlantUML, you'll need to depict the series of interactions between different components and actors to accomplish this task. Below is an example of how you might structure this Sequence Diagram.

```plantuml
@startuml
actor Manager
participant "Management Interface" as UI
participant "Backend Service" as Backend
participant "Database" as DB

Manager -> UI : Requests employee expenses
UI -> Backend : Fetches employee expenses
Backend -> DB : Query expenses data
DB -> Backend : Return expenses data
Backend -> UI : Sends expenses data
UI -> Manager : Displays employee expenses

@enduml
```

Explanation of the Sequence Diagram:

1. **Manager**: The actor who initiates the process by requesting to see the employee expenses from the Management Interface.
2. **Management Interface (UI)**: The user interface where the manager interacts with the system. This could be a web or mobile application.
3. **Backend Service (Backend)**: The server-side logic that processes the manager's request. It communicates with the database to fetch the necessary information.
4. **Database (DB)**: The storage system that contains all data regarding employee expenses among other things. This could be implemented with MongoDB, PostgreSQL, or another database system according to your technology stack.

Steps:

- The Manager makes a request to see employee expenses.
- The Management Interface captures this request and forwards it to the Backend Service.
- The Backend Service retrieves this request and queries the Database for the required employee expenses data.
- The Database returns the expenses data to the Backend Service.
- The Backend Service then sends this data back to the Management Interface.
- Finally, the Management Interface displays the employee expenses to the Manager.

Remember, the details of your sequence diagram will depend on the specific implementations of your system's architecture, the technology stack, and how you've structured your API and database schema.