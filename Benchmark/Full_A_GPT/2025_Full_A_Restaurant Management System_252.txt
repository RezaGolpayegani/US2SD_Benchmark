Creating a sequence diagram requires visualizing the interactions between various system components and actors to fulfill the given user story. Here's a detailed walkthrough of how this could be represented in PlantUML format, focusing on a restaurant manager wanting to see and manage customer orders to calculate total sales.

First, you need to understand the objects and actors involved in this scenario:

- **Restaurant Manager**: Initiates the request to view and manage customer orders.
- **Web Interface/Web App**: The frontend through which the manager interacts with the system.
- **Backend Server**: Handles requests from the frontend and interacts with the database.
- **Database**: Stores and retrieves order and sales data.

Now, let's draft the PlantUML sequence diagram:

```plantuml
@startuml
actor Manager as M
participant "Web Interface" as W
participant "Backend Server" as B
database "Database" as D

== View and Manage Customer Orders ==

M -> W: Request to view orders
note right of M: Wants to calculate total sales

W -> B: Fetch orders data
activate B

B -> D: Query order details
activate D

D --> B: Return order details
deactivate D

B --> W: Show orders data
deactivate B

W --> M: Display orders

M -> W: Select and manage orders
note over M,W: Modify or update as needed

W -> B: Update orders data
activate B

B -> D: Process updates
activate D

D --> B: Confirm updates
deactivate D

B --> W: Show success message
deactivate B

W --> M: Display confirmation

== Calculate Total Sales ==

M -> W: Request to calculate total sales

W -> B: Calculate sales request
activate B

B -> D: Sum up sales data
activate D

D --> B: Return total sales
deactivate D

B --> W: Display total sales
deactivate B

W --> M: Show total sales

@enduml
```

This PlantUML sequence diagram describes the steps the restaurant manager would take to view, manage, and calculate total sales from customer orders through the system. Here's a breakdown of the diagram:

1. **View and Manage Customer Orders**: The manager requests to view orders through the web interface. The backend server fetches order data from the database and displays it via the web interface. The manager can then modify or update orders as necessary, with the system processing and confirming these updates.

2. **Calculate Total Sales**: Following order management, the manager requests a calculation of total sales. The backend server then computes this from the data in the database and displays the result to the manager through the web interface.

Remember, this diagram assumes basic interactions for clarity. Real-world applications might involve more steps or complex interactions, especially considering error handling, security, and simultaneous users.