To create a detailed sequence diagram for the user story "As a waiter, I want to keep the waiting time of the table" using PlantUML, we first need to define the sequence of interactions and entities involved in managing and recording the waiting time for a table. Let's outline a simple process:

1. The waiter observes or is notified that a customer is waiting.
2. The waiter inputs or starts the wait timer for the table.
3. The waiter assigns the table to the customer once it's ready.
4. The system calculates and records the waiting time.
5. The waiter or system notifies the customer that the table is ready.

Based on this process, let's draft a PlantUML sequence diagram.

```plantuml
@startuml
participant Waiter as waiter
participant "Wait Time Tracker\nSystem" as system
participant "Customer Notification\nService" as notificationService
participant Customer as customer

== Wait Time Tracking ==
waiter -> system : Start wait timer for Table X
note right of system: Wait timer initiated

== Table Ready ==
waiter -> system : Mark Table X as ready
system -> system : Calculate total wait time
note right of system: Wait time recorded

== Notify Customer ==
system -> notificationService : Notify Customer(Table X Ready)
notificationRRORService -> customer : Table X is ready
note right of customer: Customer heads to table

@enduml
```

This diagram shows the basic interaction flow according to the identified steps. However, the process can be more complex depending on the actual system's requirements and features, such as handling multiple waitlists, integrating with a reservation system, or sending SMS notifications to customers. 

Remember, this is a simplified example to illustrate how a waiter can interact with a system designed to track and manage table waiting times. Depending on your project's scope and technical specifications, you might need to incorporate additional details or functionalities.