Creating a detailed Sequence Diagram for the given user story "As an owner, I want to edit the employee data in terms of clock in and out, so that I can fix the date in case of any mistake" involves illustrating the interactions among the system's components to achieve the desired functionality. Here's how you can represent this in PlantUML format:

```plantuml
@startuml
participant Owner as owner
participant "UI Interface" as UI
participant "Backend Server" as server
participant "Employee Management System" as empManager
participant "Database" as db

owner -> UI : Access employee management module
UI -> server : Request employee data
server -> empManager : Query employee clock-in/out records
empManager -> db : Fetch employee time records
db --> empManager : Employee time records
empManager --> server : Employee time data
server --> UI : Display employee time data
UI --> owner : Show employee time data

owner -> UI : Request edit of clock-in/out data
UI -> server : Send edit request
server -> empManager : Process edit request
empManager -> db : Update employee time records
db --> empManager : Confirm update
empManager --> server : Update successful
server --> UI : Display success message
UI --> owner : Confirm data updated

@enduml
```

This sequence diagram starts with the Owner accessing the Employee Management module through the UI Interface, motions through the process of requesting and displaying the employee's clock-in/out data, and concludes with the editing and updating process, including the confirmation of the successful data update.

Remember, the specifics of interactions can vary based on the actual implementation details of the Restaurant Management and Operations System, such as how the edit request is structured or the level of detail available in the employee time records. This diagram is a high-level representation to guide development.