Creating a detailed sequence diagram for the user story "As a restaurant manager, I want to see employee information and generate performance reports to manage workforce" involves illustrating how different system components interact over time. Below is a PlantUML code snippet that represents the sequence of actions from the perspective of a restaurant manager using the Restaurant Management and Operations System to view employee information and generate performance reports.

```plantuml
@startuml
participant Manager as M
participant "UI Interface" as UI
participant "Backend System" as BS
participant "Database" as DB

== View Employee Information ==
M -> UI ++ : Selects "View Employee"
UI -> BS ++ : Request Employee Information
BS -> DB ++ : Query Employee Data
DB -> BS : Return Employee Data
BS -> UI : Display Employee Information
UI -> M : Employee Information Shown

== Generate Performance Reports ==
M -> UI ++ : Selects "Generate Reports"
UI -> BS ++ : Request to Generate Performance Report
BS -> DB ++ : Query Employee Performance Data
DB -> BS : Returns Performance Data
BS -> BS : Process and Generate Report
BS -> UI : Display Generated Report
UI -> M : Performance Report Shown
@enduml
```

### Explanation:
1. **Manager (Participant)**: The restaurant manager who initiates the interactions to view employee information and generate performance reports.
   
2. **UI Interface**: Represents the frontend user interface through which the manager interacts with the system. It's where the manager inputs their choices and views the output.

3. **Backend System**: Acts as the intermediary that processes the manager's requests, fetching and sending data to/from the database, and processing that data (e.g., generating reports).

4. **Database**: Stores all employee data and performance metrics, responding to queries from the backend system.

### Sequence of Actions:
1. **View Employee Information**:
   - The manager selects "View Employee" from the UI.
   - The UI requests employee information from the backend.
   - The backend then queries the database for employee data.
   - The database returns the requested information, which is then displayed to the manager through the UI.

2. **Generate Performance Reports**:
   - The manager selects "Generate Reports" on the UI.
   - The UI requests the generation of a performance report from the backend.
   - The backend queries the database for relevant employee performance data.
   - Once the data is fetched, the backend processes this data to generate a performance report.
   - The generated report is sent back to the UI and displayed to the manager.

This sequence diagram provides a high-level overview of the interactions involved in viewing employee information and generating performance reports within the Restaurant Management and Operations System from the manager's viewpoint.