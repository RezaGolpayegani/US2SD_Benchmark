Given the request to generate a detailed Sequence Diagram in Plant UML format for the specific user story, "As an employee, I want to edit my contact information," please find below a simplified version of what such a sequence diagram could look like.

This sequence involves several components, such as the User Interface (UI), the Backend Server, and the Database. It demonstrates the process from the employee initiating a request to update contact information to the system processing and confirming the update.

```
@startuml
participant Employee_UI as UI
participant Backend_Server as Server
participant Database

UI->Server: Request to update contact info
activate Server

Server->Database: Validate employee credentials
activate Database
Database-->Server: Credentials valid
deactivate Database

Server->Database: Update contact info request
activate Database
Database-->Server: Contact info updated successfully
deactivate Database

Server-->UI: Display confirmation message
deactivate Server

UI->Employee: Shows success notification
@enduml
```

To explain the steps depicted in this Sequence Diagram:

1. **Employee/UI Interaction**: The process starts with the employee initiating a request to update their contact information through the User Interface (UI). This could be a form on a web page or an app where they input their new contact details.

2. **Server Processing**: The UI sends this request to the Backend Server, which first validates the employee's credentials to ensure that the request is legitimate and that the employee has the right to update the information.

3. **Database Validation and Update**: Once the credentials are validated, the server sends a request to the Database to update the employee's contact information. The Database processes this request, updates the information, and confirms the success of the operation back to the server.

4. **Confirmation**: The server then sends a confirmation message back to the UI, which in turn notifies the employee that their contact information has been successfully updated.

This sequence diagram assumes a basic scenario and does not account for potential errors or security practices like encryption, which should be included in a comprehensive design. Additionally, interactions might vary based on the specific software architecture, the technologies used, and the system requirements.