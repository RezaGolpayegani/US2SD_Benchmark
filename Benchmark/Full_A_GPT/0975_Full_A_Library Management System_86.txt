Creating a detailed Sequence Diagram for the specified user story requires outlining the interactions between different elements of the Comprehensive Library Management System (CLMS) when a librarian wants to see information about borrowed books. 

Given the scope of the project, a simplified sequence diagram can be created using PlantUML syntax to illustrate the process. This example focuses on the core participants such as the `Librarian`, the `Library System`, and the `Database` which stores information about borrowed books.

```plantuml
@startuml
actor Librarian
participant "Library System" as System
database "Library Database" as Database

Librarian -> System : Request borrowed books info
activate System

System -> Database : Query borrowed books
activate Database

Database --> System : Return borrowed books details
deactivate Database

System --> Librarian : Display borrowed books information
deactivate System

@enduml
```

In this sequence diagram, the process flows as follows:

1. **Librarian Initiates Request**: The librarian interacts with the Library System interface to request information on borrowed books. This action kicks off the sequence of operations.

2. **Query Forwarded to Database**: The Library System processes this request and formulates a query to fetch details about borrowed books from the Library Database. This includes identifying information such as book titles, borrower names, borrowing dates, and due dates.

3. **Database Responds**: The Database, upon receiving the query, retrieves the requested information and sends it back to the Library System. This step involves searching records to find all currently borrowed books.

4. **Information Displayed to Librarian**: Finally, the Library System receives the borrowed books' details from the Database and presents this information to the librarian, who can then take appropriate actions or respond to queries.

This sequence diagram assumes a successful interaction loop where the required data is available and correctly returned to the librarian. Error handling, authentication, and other technical complexities are not depicted in this high-level overview, though they are crucial considerations for a real-life implementation.