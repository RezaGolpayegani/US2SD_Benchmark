Creating a detailed sequence diagram for the described user story entails illustrating the interaction between an app developer and the components of the Advanced Dataset Management and Version Control System during the process of including dataset type code in an app artifact and creating a dataset of that type when deploying the app. Given the complexity and the high-level nature of the project description, the following sequence diagram presents a simplified view in PlantUML format.

```plantuml
@startuml
participant AppDeveloper as AD
participant ArtifactRepository as AR
participant DatasetTypeRegistry as DTR
participant DeploymentManager as DM
participant DatasetInstanceManager as DIM

AD -> AR : Include dataset type code\nin app artifact
AD -> AR : Push app artifact with dataset type
AR -> DTR : Register dataset type
note right of DTR: Checks for conflicts\nand registers type

AD -> DM : Deploy app with dataset
DM -> DTR : Retrieves dataset type info
DTR --> DM : Dataset type details
DM -> DIM : Create dataset instance of the type

DIM -> DTR : Confirm dataset type compatibility
DTR --> DIM : Compatibility confirmed

DIM -> DIM : Instantiate dataset
DIM --> AD : Dataset instance created\nand ready for app

note over AD, DIM : Deployment complete with\napp and dataset instance ready

@enduml
```

### Explanation:
1. **AppDeveloper (AD)** represents the app developer making operations. This is the actor initiating the dataset inclusion and the app deployment process.
2. **ArtifactRepository (AR)** is the component where app artifacts, including the code for dataset types, are stored and managed.
3. **DatasetTypeRegistry (DTR)** is responsible for the registration and management of dataset types. It ensures there are no conflicts with existing types and provides type details for dataset instance creation.
4. **DeploymentManager (DM)** handles the deployment of apps, which includes retrieving dataset type information and requesting dataset instance creation for the app being deployed.
5. **DatasetInstanceamongdifferentapplicationsManager (DIM)** takes care of creating and managing dataset instances. It confirms dataset type compatibility and instantiates the dataset for the app.

This PlantUML sequence diagram simplifies the process to focus on key interactions. In a real-world scenario, additional steps, such as authentication, authorization, error handling, and logging, might also be integral to the process.