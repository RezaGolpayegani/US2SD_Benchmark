Creating a detailed sequence diagram for the specific user story you mentioned involves visualizing how various components of the system interact with each other to fulfill the requirement. This would likely involve interaction between the site admin interface, the database (which holds data on trainers and class results), and possibly a reporting or analytics engine to calculate averages and identify outliers. Here's an outline in PlantUML format that depicts what such a sequence diagram might look like:

```plantuml
@startuml

participant "Site Admin" as admin
participant "Admin Interface" as ui
participant "Database" as db
participant "Analytics Engine" as ae

admin -> ui : Requests trainer results and class averages
ui -> db : Query trainer and class data
db -> ui : Return data
ui -> ae : Calculate averages and identify outliers
ae -> ui : Return calculated data
ui -> admin : Display results and averages

note over admin, ui : Admin can filter \nresults based on specific criteria

@enduml
```

This diagram represents a simplified flow of interactions:

1. **Site Admin initiates a request:** The journey begins with the site admin requesting to see the results for each trainer and averages for the class through an admin interface.
   
2. **Admin Interface queries Database:** The admin interface sends a query to the database to fetch the relevant trainer and class data. This involves gathering raw data such as scores or feedback ratings provided by class participants.
   
3. **Database returns data:** The database processes the query and returns the requested data back to the admin interface.
   
4. **Calculation by Analytics Engine:** The raw data is then sent to an analytics engine. This engine is responsible for calculating averages and identifying outliers or patterns that may indicate problems or areas of interest. This step is crucial for transforming raw data into actionable insights.
   
5. **Analytics Engine returns calculated data:** Once the calculations are complete, the analytics engine sends the results back to the admin interface. This would include both the individual results for each trainer and the aggregated or average results for the class.
   
6. **Display results to Site Admin:** Finally, the admin interface presents these results to the site admin. The interface might allow for filtering or drilling down into specific data points for detailed analysis.

This sequence assumes a backend processing model where analysis and calculations take place on the server side. Given the potential complexity of data analysis, especially with outlier detection, leveraging a dedicated analytics engine can offload intensive computations from the primary application server.