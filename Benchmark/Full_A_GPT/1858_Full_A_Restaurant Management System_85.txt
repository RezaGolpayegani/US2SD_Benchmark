Creating a detailed sequence diagram for the described user story involves outlining the interaction between different components of the Restaurant Management and Operations System when a management user requests to see the number of orders and turnover from the previous week. 

Below is a template for a PlantUML sequence diagram that represents this interaction:

```
@startuml
participant "Management User" as user
participant "Web Interface" as web
participant "Backend Server" as server
participant "Database" as db
participant "Analytics Module" as analytics

user -> web : Request turnover & order data for last week
web -> server : Fetch data for the previous week
server -> db : Query orders and turnover data
db -> server : Return queried data
server -> analytics : Process data for analytics
analytics -> server : Provide summarized data
server -> web : Display data to user
web -> user : Show number of orders and turnover

@enduml
```

To explain the process according to the diagram:

1. **Management User initiates the request:** The process begins when the management user requests to see the number of orders and turnover from a week ago through the web interface. This could be done through a dashboard or a specific analytics page designed for management.

2. **Web Interface forwards the request:** The web interface, which is built using either React.js or Angular, captures the user's request and sends it to the backend server for processing.

3. **Backend Server processes the request:** The backend server, which runs Node.js with Express, receives the request and formulates a query to retrieve the required data from the database.

4. **Database queries the data:** The request is then passed onto the database, which could be MongoDB or PostgreSQL, to fetch the necessary orders and turnover information from the previous week.

5. **Data sent back to the Backend Server:** The database returns the queried information to the backend server, where it might need further processing or consolidation before being useful.

6. **Analytics Module processes the data:** The backend server sends the data to the Analytics Module, which is tasked with calculating summaries, trends, and any other relevant analytic information from the raw data. 

7. **Processed data sent to the Web Interface:** The processed and summarized data is then sent back to the web interface from the backend server.

8. **Management User receives the data:** Finally, the web interface displays the information to the management user, showing the number of orders and turnover from the previous week in a comprehensible format.

This sequence dynamically illustrates how the system components interact to fulfill the management user's request, showcasing the power and flexibility of the Restaurant Management and Operations System.