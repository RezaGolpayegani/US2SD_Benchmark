Creating a detailed sequence diagram for the user story: "As a user, I want to search specifically for files rather than log book pages" involves outlining the interactions between the user, the UI, and the backend systems including data storage and search functionality. Below, I've generated a PlantUML code snippet that captures these interactions. This example presupposes a simplified architecture where the UI communicates directly with a backend system to perform the search query.

```plantuml
@startuml

participant User as user
participant "UI" as ui
participant "Search Controller" as search
participant "File Management System" as filesys
database "Data Storage" as storage

user -> ui: Enter search query for files
activate ui

ui -> search: Request file search
activate search

search -> filesys: Query for files
activate filesys

filesys -> storage: Fetch file data
activate storage

storage --> filesys: File data
deactivate storage

filesys --> search: File search results
deactivate filesys

search --> ui: Display search results
deactivate search

ui --> user: Show file results to user
deactivate ui

@enduml
```

This sequence diagram starts with the User entering a search query specific to files in the UI. The UI forwards this request to a "Search Controller" component, which is responsible for orchestrating the search operation. The "Search Controller" queries the "File Management System", which interacts with "Data Storage" to fetch the required file data based on the search parameters. Once the data is retrieved, it follows the path back to the user through the system components, resulting in the display of the search results to the user. 

Please note, the actual implementation in a production environment could be more complex with additional layers of caching, authentication, or data indexing/search services (like Elasticsearch), not depicted here for simplicity. Also, the naming conventions and structures can be adapted according to your project's architecture and standards.