Given the project's detailed scope and focus areas, I'll outline a simplified sequence diagram in PlantUML format that illustrates the scenario for a waiter wanting to view customers' information. This scenario presumes that the waiter's action is part of a broader process to manage tables, orders, or customer relationship management features within the Restaurant Management and Operations System.

Given the context, this process could involve the waiter accessing a digital floor plan to see which customers are at which tables, any pending orders, or possibly even customer preferences or reservations.

```plantuml
@startuml
actor Waiter
participant UI as "User Interface"
participant Server as "Backend Server"
participant Database as "Database"

== View Customer Data ==

Waiter -> UI: Select "View Tables/Customer"
UI -> Server: Request current table/customer data
Server -> Database: Query table/customer information
Database -> Server: Return table/customer information
Server -> UI: Display table/customer information
UI -> Waiter: Show current customers and their info

@enduml
```

This diagram illustrates a basic flow from the waiter's perspective, showing their interaction with the system to view customer information. The sequence starts with the waiter requesting to view tables or customer information through the user interface (UI). The UI then sends this request to the backend server, which queries the database for the current table and customer information. Once the database returns this data, it is sent back through to the server, which in turn forwards it to the UI, finally displaying the data to the waiter.

Key Assumptions for this Diagram:
- The "User Interface" represents the frontend system, which could be a web or mobile application accessible by the restaurant staff.
- "Backend Server" encapsulates the server-side logic handled by technologies like Node.js with Express, as outlined in the project technologies.
- "Database" stores all dynamic and static data related to customers, tables, orders, and other relevant information. The choice between MongoDB and PostgreSQL affects how the query might be structured but does not change the high-level flow.

Remember, the sequence diagram is simplified for clarity and to address the specific user story. Actual implementation details might involve additional steps or systems, especially concerning authentication, error handling, and real-time updates.