To create a detailed sequence diagram for the user story "As an owner, I want to see our top selling menu items, so that I want to focus on offering right products" using PlantUML, it will involve several system components interacting with each other. The components involved will typically include the Management User Interface (Owner's dashboard), Backend Server, Database, and possibly Analytics Service if the system architecture includes microservices for handling analytics specifically.

Below is a basic sequence diagram in PlantUML syntax to illustrate this process. This example assumes the presence of a microservice or a module dedicated to analytics within the backend server, which processes and fetches top-selling menu items.

```plantuml
@startuml
actor Owner
participant "Management UI" as UI
participant "Backend Server" as Backend
participant "Analytics Module" as Analytics
participant "Database" as DB

Owner -> UI: Request top selling menu items
UI -> Backend: Get top selling menu menu items
Backend -> Analytics: Request processed sales data
Analytics -> DB: Fetch sales information
DB -> Analytics: Return sales data
Analytics -> Backend: Process and identify top items
Backend -> UI: Display top selling menu items
UI -> Owner: Show top selling items list

@enduml
```

This sequence starts with the Owner requesting to see the top-selling menu items from the Management User Interface. The UI then asks the Backend Server for this information. The Backend Server doesnates this task to the Analytics Module, which in turn requests and retrieves sales data from the Database. The retrieved sales data is processed by the Analytics Module to determine the top-selling items. This information is sent back to the Backend Server, which then communicates it to the UI for display to the Owner.

This diagram is oversimplified to keep it understandable. Depending on specific system requirements or the complexity of the analytics needed (like calculating top sellers in real-time, considering seasonal adjustments, or integrating third-party sales data), more steps or actors (e.g., caching systems, external APIs) might be involved in this process. Additionally, error handling steps are left out for simplicity, but in a real-world application, it's crucial to include error handling at various stages of the sequence to deal with any potential failures or discrepancies.