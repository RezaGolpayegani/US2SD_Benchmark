To accommodate the request for a detailed sequence diagram for the user story "As a restaurant employee, I want to see active orders", we'll design a diagram that outlines the process in PlantUML format. This sequence diagram will involve interactions between the employee, the system's interface, and the orders database. For simplicity, the process begins with the employee's request to view active orders and ends with the display of those orders.

```plantuml
@startuml
participant Employee as E
participant SystemInterface as SI
participant OrdersDatabase as ODB

E -> SI : Request to view active orders
activate E
activate SI

SI -> ODB : Fetch active orders
activate ODB

ODB --> SI : Active orders data
deactivate ODB

SI --> E : Display active orders
deactivate SI
deactivate E

@enduml
```

### Explanation:
1. **Employee (E)**: The restaurant employee initiates the process by requesting to view active orders through the system's interface.
2. **SystemInterface (SI)**: Acts as the front-end through which the employee interacts with the system. This component sends the request to fetch active orders from the orders database.
3. **OrdersDatabase (ODB)**: Represents the database where all orders are stored. It processes the request from the system interface, fetches the relevant active orders, and returns this information back to the interface.
4. Finally, the **SystemInterface** receives the active orders information and displays it to the **Employee**, completing the process.

This diagram abstracts the complexities involved in the back-end processing and focuses on the sequence of interactions starting from the employee's request up to the visualization of active orders. For a real implementation, additional details and steps, such as authentication and error handling, would likely be necessary.