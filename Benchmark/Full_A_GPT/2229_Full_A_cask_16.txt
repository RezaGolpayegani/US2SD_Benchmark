Creating a detailed sequence diagram in PlantUML for the provided user story involves delineating the interactions among different components involved in writing unit tests for an app that depends on the interface of a dataset type. This scenario focuses on the separation of interface and implementation of dataset types which allows for easier unit testing by app developers.

Given the complexity and the abstraction level of the provided information, the following sequence diagram provides a conceptual view. It captures the steps an app developer would typically follow to write and execute unit tests under this system's architecture. This includes defining the dataset interface, mocking dataset implementations, and writing unit tests against those interfaces.

```plantuml
@startuml

participant "App Developer" as AD
participant "IDE/Development Environment" as IDE
participant "Dataset Interface" as DI
participant "Mocking Framework" as MF
participant "Unit Test Framework" as UTF
database "Mocked Dataset Instance" as MDI

== Define Dataset Interface ==
AD -> DI: Define DatasetInterface
DI -> IDE: Provide Interface Details

== Develop App against Dataset Interface ==
AD -> IDE: Implement App Logic\nusing DatasetInterface

== Setup Mock Environment ==
AD -> MF: Create Mock Implementation\nof DatasetInterface
MF -> MDI: Instantiate Mock Dataset\nwith Test Data
MF -> IDE: Integrate Mock into App Environment

== Write Unit Tests ==
AD -> UTF: Write Tests for App\nusing Mocked Dataset
UTF -> IDE: Provide Test Cases\nand Expectations

== Execute Unit Tests ==
AD -> IDE: Initiate Test Run
IDE -> UTF: Execute Unit Tests
UTF -> MDI: Interact with Mock Dataset\n (CRUD Operations)
UTF --> AD: Return Test Results (Pass/Fail)

@enduml
```

**Explanation of the Sequence:**

1. **Define Dataset Interface:** The app developer starts by defining the dataset interface, which outlines the expected behavior and capabilities of the dataset types their app will interact with.

2. **Develop App against Dataset Interface:** With the dataset interface defined, the app developer implements the logic of their application, relying solely on the defined interface without concern for the actual dataset implementation.

3. **Setup Mock Environment:** To test their app, the developer uses a mocking framework to create a mock implementation of the dataset interface. This mock object is instantiated with test data and integrated into the app's development environment as a stand-in for the real dataset implementation.

4. **Write Unit Tests:** The developer writes unit tests for their application. These tests interact with the app as configured to use the mocked dataset, thus allowing for testing of the app's logic in isolation from the actual dataset implementation.

5. **Execute Unit Tests:** Finally, the developer executes the unit tests using their chosen test framework. The tests interact with the app, which in turn interacts with the mocked dataset. The test framework then reports the results back to the developer.

This diagram and sequence offer a simplified view of the process. Depending on the complexity of the app and dataset interactions, additional steps or components (such as database connections, dataset version control systems, or continuous integration pipelines) could also be involved but are not depicted here to maintain focus on the core process described in the user story.