Given the intricacies of the described Restaurant Management and Operations System and the specific user story focusing on a manager's need to edit menu items and employee information, let's break down the processes into a PlantUML sequence diagram. Due to the complexity and abstraction level, this diagram will focus on the essential interactions.

```plantuml
@startuml
actor Manager
participant "UI: Management Portal" as ManagementUI
participant "Controller: Item Management" as ItemControl
participant "Controller: Employee Management" as EmployeeControl
database "DB: Restaurant Database" as RestaurantDB

== Edit Menu Item ==
Manager -> ManagementUI : Select "Edit Menu Item"
ManagementUI -> ItemControl : Request item details
ItemGotdata -> RestaurantDB : Fetch menu item details
RestaurantDB --> ItemControl : Return item details
ItemControl --> ManagementUI : Display item details
Manager -> ManagementUI : Update menu item details and submit
ManagementUI -> ItemControl : Send updated item details
ItemUpdated -> RestaurantDB : Update menu item in database
RestaurantDB --> ItemControl : Confirm item update
ItemControl --> ManagementUI : Display update confirmation
ManagementUI --> Manager : Show success message

== Edit Employee Information ==
Manager -> ManagementUI : Select "Edit Employee"
ManagementUI -> EmployeeControl : Request employee details
EmployeeControl -> RestaurantDB : Fetch employee details
RestaurantDB --> EmployeeControl : Return employee details
EmployeeControl --> ManagementUI : Display employee details
Manager -> ManagementUI : Update employee details and submit
ManagementUI -> EmployeeControl : Send updated employee information
EmployeeControl -> RestaurantDB : Update employee in database
RestaurantDB --> EmployeeControl : Confirm employee update
EmployeeControl --> ManagementUI : Display update confirmation
ManagementUI --> Manager : Show success success message

@enduml
```

This PlantUML sequence diagram illustrates the interactions between a manager and the system for editing both menu items and employee information. The flow starts with the manager accessing the Management Portal UI to either edit menu items or employee details. The UI interacts with the corresponding controllers (Item Management or Employee Management), which in turn interact with the restaurant database to fetch and update the required information. Each operation ends with a confirmation message shown to the manager once the updates are successfully saved in the database.

This diagram simplifies complex processes and assumes direct interactions without detailing authentication, error handling, or the specifics of the data model which would entail more detailed sequences and potentially more participants (like authentication services or more detailed breakdown of the backend architecture).

Remember, actual implementation details may introduce additional steps or require adjustments based on security, data validation, and the specific requirements of the Restaurant Management and Operations System.