Given the user story requirement and to create a detailed sequence diagram in PlantUML format, here's an example of how to structure the sequence of interactions between components for an API user to get a CSV output from a cube-based query on the OpenSpending platform. This diagram assumes a simplified process where an API user sends a query to the platform, the platform processes the query against the dataset cube, and then generates a CSV file as a response.

```plantuml
@startuml
participant User as U
participant "API Gateway" as A
participant "Query Service" as Q
participant "Data Cube" as D
participant "CSV Generator" as C
participant "Storage" as S

U -> A: Send cube-based query\nwith CSV output request
A -> Q: Forward query request
Q -> D: Fetch relevant data from cube
D -> Q: Return fetched data
Q -> C: Convert data to CSV
C -> S: Save CSV file
S -> C: Return CSV file URL
C -> Q: Send CSV file URL
Q -> A: Return CSV file URL
A -> U: Send CSV file URL
U -> S: Request CSV file
S -> U: Deliver CSV file

@enduml
```
In this diagram:
- **User (U):** Represents the API user making the request.
- **API Gateway (A):** Acts as the entry point for handling API requests, including authentication, routing, etc.
- **Query Service (Q):** Handles the logic for processing cube-based queries against datasets.
- **Data Cube (D):** Represents the multidimensional dataset structure from which data is fetched based on the query.
- **CSV Generator (C):** A utility service that converts the query result data into a CSV format.
- **Storage (S):** The storage system where the generated CSV file is temporarily stored and from which the API user can download the file.

Based on this sequence, when a user sends a request for a CSV output of a cube-based query, the API Directs the request to the Query Service, which fetches the necessary data. The fetched data is then passed to the CSV Generator, which converts the data into CSV format and saves it to storage. The URL of the saved CSV file is sent back through the chain to the user, who can then download the CSV file directly from the storage.

This diagram provides a high-level overview. Depending on the actual architecture and requirements of the OpenSpending platform, additional details such as authentication, error handling, and data validation steps could be added to create a more comprehensive sequence diagram.