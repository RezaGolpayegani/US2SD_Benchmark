Creating a detailed sequence diagram for the user story of a Publisher wanting to publish a data package via the UI involves depicting the interaction between different system components and actors involved in the process. Here's a PlantUML code snippet to visualize this process:

```plantuml
@startuml
actor Publisher
participant "UI" as UI
participant "Auth Service" as Auth
participant "Data Service" as DataService
participant "Validation Service" as Validation
participant "Storage Service" as Storage
participant "Version Control" as Versioning

Publisher -> UI: Select "Publish Data Package"
UI -> Auth: Validate Publisher
Auth --> UI: Validation Response

alt Validation Success
  UI -> DataService: Request to Publish
  DataService -> Validation: Validate Data Package
  Validation --> DataService: Validation Success
  DataService -> Storage: Store Data Package
  Storage --> DataService: Confirmation & Generate URL
  DataService -> Versioning: Create New Version
  Versioning --> DataService: Version Info
  DataService --> UI: Publish Success + Data URL
  UI --> Publisher: Show Success Message & Link
else Validation Failed
  Validation --> DataService: Validation Errors
  DataService --> UI: Show Validation Errors
  UI --> Publisher: Display Errors
end
@enduml
```

### Explanation:
1. **Publisher to UI**: The Publisher initiates the process by selecting the option to publish a data package through the user interface (UI).

2. **UI to Auth Service**: The UI requests the Auth Service to validate the Publisher to ensure they have the necessary permissions to publish data packages.

3. **Auth to UI**: The Auth Service responds to the UI with the validation result.

4. **UI to Data Service (Conditional on Validation Success)**: If the Publisher is validated successfully, the UI requests the Data Service to proceed with publishing the data package.

5. **Data Service to Validation Service**: Before publishing, the Data Service requests the Validation Service to ensure the data package meets the necessary quality and integrity standards.

6. **Validation Service to Data Service**: The Validation Service returns a response indicating whether the validation was successful or not.

7. **Data Service to Storage Service (Conditional on Validation Success)**: If the data package passes validation, it is then stored in the Storage Service, which returns a confirmation and a URL for accessing the data package.

8. **Data Service to Version Control**: The Data Service requests the Version Control to create a new version for the data package.

9. **Version Control to Data Service**: Version Control provides the version information for the data package back to the Data Service.

10. **Data Service to UI**: The Data Service informs the UI about the successful publication, providing the URL for the data package.

11. **UI to Publisher**: Finally, the Publisher is shown a success message along with the link to the published data package.

**In the case of validation failure**, the process diverts: The Validation Service sends validation errors back to the Data Service, which then informs the UI to display those errors to the Publisher.