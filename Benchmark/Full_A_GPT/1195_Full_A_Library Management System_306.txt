To generate a detailed Sequence Diagram for the user story, "As a member, I want to see the total number of account-based penalties that are incurred, so that I will pay on time," using PlantUML, you need to consider the interactions between the library member (user), the front-end system interface, the back-end application logic, and the database. The sequence involves querying the system for penalties and viewing them.

Here's a basic illustration of how these interactions can be represented in PlantUML format:

```plantuml
@startuml
actor Member
participant "Frontend Interface" as Frontend
participant "Backend System" as Backend
database "Database" as DB

Member -> Frontend : Request to view penalties
Frontend -> Backend : Query penalties for user ID
Backend -> DB : Fetch penalty details
DB -> Backend : Return penalty data
Backend -> Frontend : Show penalty details
Frontend -> Member : Display penalties information

@enduml
```

This diagram showcases the following flow:

1. **Member Requests Penalty Information**: The library member initiates a request to see all incurred penalties through the library's front-end interface. This could be done via a website or a mobile app.

2. **Frontend Interface Handles Request**: The front-end system captures this request and forwards it to the backend system for processing.

3. **Backend Processes Request**: The backend system, receiving the request with the user's ID, queries the database for penalties associated with the member's account.

4. **Database Fetches Penalty Details**: The database processes this request and returns the relevant penalty information back to the backend system.

5. **Backend to Frontend Communication**: The backend system then sends this information back to the frontend interface.

6. **Member Views Penalty Information**: Finally, the frontend system displays the total number of penalties and possibly a breakdown or details of each penalty to the member.

This sequence diagram is simplified to focus on the key interactions involved in retrieving and displaying penalty information to the library member. Depending on the project's specifications, additional details, such as authentication and error handling, would likely be necessary for a complete implementation.