Creating a detailed sequence diagram for the specified user story “As a restaurant manager, I want to get a report of daily total sales” involves illustrating the interactions between various objects from when the restaurant manager initiates the request for the sales report to when the report is delivered. Below is a PlantUML code that represents these interactions in a sequence diagram format.

Please note that this diagram simplifies complex interactions and focuses on the key steps involved in retrieving a daily total sales report in the context of a Restaurant Management and Operations System.

```plantuml
@startuml
!theme plain

actor "Restaurant Manager" as manager
participant "Web Interface" as web
participant "Backend Server\n(Node.js + Express)" as server
database "Database\n(MongoDB/PostgreSQL)" as db
participant "Report Generator" as reportGen
participant "Analytics Module" as analytics

== Request Daily Sales Report ==

manager -> web : Request daily sales report
web -> server : GET /reports/daily-sales
server -> db : Query sales data\n(Date: Today)
db -> server : Return sales data
server -> reportGen : Generate report\nfrom sales data
reportGen -> analytics : Analyze sales data
analytics -> reportGen : Send analytics data\n(e.g., total sales, trends)
reportGen -> server : Daily Sales Report\n(including analytics)
server -> web : Send report
web -> manager : Display report

@enduml
```

### Explanation:
- **Restaurant Manager**: Initiates the request for a daily total sales report through the system's web interface.
- **Web Interface**: Acts as the front end where the request is made. This could be built with React.js or Angular as mentioned in the project technology stack.
- **Backend Server (Node.js + Express)**: Receives the request from the web interface and processes it. The server is responsible for handling business logic and interacting with the database and other modules like report generation and analytics.
- **Database (MongoDB/PostgreSQL)**: Stores all the data related to sales transactions. The choice between MongoDB and PostgreSQL depends on project requirements and preferences.
- **Report Generator**: A subsystem or service dedicated to generating reports based on data. It formats the sales data into a readable and presentable report.
- **Analytics Module**: Analyzes the sales data to provide insights, such as trends or total sales, which are included in the report to add value.

This sequence diagram provides a high-level overview and can be expanded with more detailed interactions, error handling, and specific attributes, depending on the project requirements and design.