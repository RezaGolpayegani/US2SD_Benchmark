To create a detailed sequence diagram in Plant UML format for the specified user story, you need to understand the interactions between different components or actors within the system that facilitate the process of editing the content of emails sent to new Certified Scrum Masters and Product Owners without involving a programmer. Let's break it down:

1. **Actors**: Site Editor, Content Management System (CMS), Email Template.

2. **Process Flow**:
   - Site Editor decides to update the email content.
   - Site Editor accesses the CMS.
   - Site Editor navigates to the Email Templates section.
   - Site Editor selects the specific email template for new Certified Scrum Masters and Product Owners.
   - Site Editor edits the content in the template.
   - Site Editor previews the changes.
   - Site Editor saves the updated template.
   - The system confirms the changes to the Site Editor.
   - Automated emails use the updated content when triggered.

Here is how you would represent the above process flow as a sequence diagram in Plant UML:

```plantuml
@startuml
actor "Site Editor" as editor
entity "Content Management System (CMS)" as cms
entity "Email Template" as template

editor -> cms : Access CMS
cms -> editor : Display Dashboard
editor -> cms : Navigate to Email Templates
cms -> editor : Show Templates List
editor -> cms : Select Email Template\n(for New Certifications)
cms -> template : Fetch Selected Template
template -> editor : Display Template Content
editor -> template : Edit Content
template -> editor : Preview Changes
editor -> template : Save Updated Content
template -> cms : Confirm Changes
cms -> editor : Show Success Message

@enduml
```

This sequence diagram outlines the steps involved from the perspective of the Site Editor wanting to edit the email content, touching upon the interactions with the CMS and the specific Email Template to be edited. The diagram uses basic PlantUML syntax to define actors (Site Editor) and systems/components (CMS, Email Template) and the messages exchanged between them to accomplish the task. Note that details such as authentication, error handling, and specific UI actions can also be included for a more detailed diagram but are omitted here for clarity and brevity.