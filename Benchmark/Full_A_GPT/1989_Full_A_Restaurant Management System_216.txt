Creating a detailed sequence diagram for the user story "As a manager, I want to update employee data so that I can keep their information up-to-date" in PlantUML format involves illustrating how different system components interact to fulfill this requirement. Below is a simplified sequence diagram in PlantUML code that outlines the key interactions between the Manager, the Restaurant Management System's Frontend, the Backend API, and the Database.

```plantuml
@startuml
participant Manager as mgr
participant "Frontend (Web App)" as frontend
participant "Backend API" as backend
participant "Database" as db

mgr -> frontend : Access Employee Management Module
frontend -> backend : Request employee data
backend -> db : Query employee data
db -> backend : Return employee data
backend -> frontend : Display employee data
frontend -> mgr : Show employee data

mgr -> frontend : Edit employee data
frontend -> backend : Update employee data request
backend -> db : Update employee query
db -> backend : Confirm employee data updated
backend -> frontend : Notify successful update
frontend -> mgr : Show update confirmation

@enduml
```

This diagram starts with the manager accessing the Employee Management Module through the web application (Frontend). The Frontend then requests the employee data from the Backend, which queries the Database for the required information. The employee data is returned to the Manager for viewing.

When the manager decides to update an employee's data, the updated information is sent from the Frontend to the Backend, which executes an update query on the Database. Upon successful update, the Backend confirms back to the Frontend, which then shows a confirmation message to the Manager.

This sequence diagram simplifies the interactions but provides a clear overview of the process for updating an employee's data in the Restaurant Management and Operations System. Depending on the complexity and specific requirements of the system, additional steps or components (such as authentication and authorization checks, logging, or error handling) might be included in a more detailed design.