Creating a detailed sequence diagram for the specified user story "As a chef, I want to check the due dates of ingredients so that I can keep them fresh." involves illustrating how the chef interacts with the system and how the system, in turn, interacts with its database to retrieve information about the freshness and due dates of ingredients. Below is the PlantUML code representing this sequence diagram:

```plantuml
@startuml
participant Chef
participant "Restaurant Management System" as System
database "Database" as DB

Chef -> System : Select "Ingredient Lookup"
activate System
System -> DB : Query ingredient due dates
activate DB
DB -> DB : Fetch due date information
DB -> System : Return ingredient data
deactivate DB
System -> Chef : Display ingredients and due dates
deactivate System

@enduml
```

### Explanation of the Sequence Diagram:
1. **Interaction Start**: The chef selects the option to look up ingredient information on the Restaurant Management and Operations System interface.
2. **System Activation**: The system initiates the process to fetch the required information about ingredient due dates.
3. **Database Query**: The system sends a request to the database to retrieve information about the due dates of ingredients.
4. **Fetch Process**: Inside the database, a process runs to select and gather the due date information for all ingredients currently tracked in the database.
5. **Returning Data**: The database sends back the information to the system.
6. **Display Information**: Finally, the system presents the ingredient due dates to the chef, allowing them to review and plan accordingly to ensure all ingredients are fresh.

This sequence diagram demonstrates a simplified view of interactions between the chef, the restaurant management system, and the database for checking ingredient due dates. It's a basic representation and, depending on the system complexity, additional steps or systems (like an inventory management subsystem) might be involved in real-world applications.