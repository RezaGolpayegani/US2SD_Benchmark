Creating a detailed sequence diagram for the scenario "As a manager, I want to see the contact information of employees" involves illustrating the interactions between the manager, the system's user interface, potentially a REST API layer, and the data storage system. Given the project's technology stack, the sequence might go through a web application and communicate with a backend server using Node.js with Express, which in turn would fetch data from a database (MongoDB or PostgreSQL).

Below is a basic example of how you might write the PlantUML code to represent these interactions. This diagram assumes that the manager interacts with a web interface, the system processes the request through an API, and then retrieves the necessary information from a database.

```plantuml
@startuml

actor "Manager" as manager
participant ":Web UI" as web
participant ":REST API\n(Node.js/Express)" as restapi
database ":Database\n(MongoDB/PostgreSQL)" as database

manager -> web : Request employees' contact info
web -> restapi : GET /employees/contacts
restapi -> database : Fetch employees' contacts
database --> restapi : Return contacts list
restapi --> web : Show contacts data
web --> manager : Display employees' contact info

@enduml
```

This sequence starts with the manager requesting to view the contact information of employees. This request is made through the web UI, which forwards the request to the REST API built with Node.js and Express. The API then communicates with the database to retrieve the information. Once the database returns the list of employee contacts, the information is sent back through the chain to eventually be displayed to the manager by the web UI.

This diagram is a simplified illustration. Depending on the project's actual complexity, including authentication, error handling, and more sophisticated data processing, additional steps and elements might be necessary. Furthermore, specific details like API endpoint names and database schema design would refine this diagram further.