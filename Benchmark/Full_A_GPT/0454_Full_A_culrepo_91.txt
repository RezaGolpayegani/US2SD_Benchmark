Creating a detailed sequence diagram for the user story provided involves illustrating the steps that the DB/IR (Database/Information Retrieval) administrator will take to add future release dates of reports or datasets to a calendar for patron information. This process involves several actors, including the DB/IR administrator and the digital repository system, along with its components such as the content management system, calendar module, and notification system.

Given the complexity and abstract nature of this task, below is a basic outline in PlantUML syntax to get you started. Note that specific implementation details might vary based on the actual architecture of Cornell University's digital repository system, which isn't detailed in your description. 

```plantuml
@startuml
participant "DB/IR Administrator" as Admin
participant "Repository Web Interface" as Interface
participant "Content Management System" as CMS
participant "Calendar Module" as Calendar
participant "Notification System" as Notify

Admin -> Interface : Log into the Repository System
Interface -> CMS : Authenticate Admin
CMS --> Admin : Authentication Success

Admin -> CMS : Navigate to Report/Dataset Management
CMS --> Interface : Display Management Options
Admin -> Interface : Select "Schedule Release"
Interface -> Calendar : Initiate Release Scheduling
Admin -> Interface : Enter Release Date and Details
Interface -> Calendar : Save Release Details
Calendar --> Admin : Confirm Release Date Saved

Admin -> Interface : Opt to Notify Patrons
Interface -> Notify : Setup Notification for Release Date
Notify --> Admin : Confirmation of Notification Setup

@enduml
```

This sequence starts with the Admin logging into the Repository Web Interface, then proceeding to schedule a future release date through the system's Content Management System (CMS), and opting to notify patrons about this future release via the Notification System. 

This diagram is a high-level representation. Depending on your requirements, you might need to add more details or steps, such as error handling (e.g., what happens if the authentication fails or the save action does not succeed).

Remember, PlantUML is flexible, and the diagram can be enriched with more interactions or broken down into more detailed steps as needed to accurately reflect the system's functionality. The sequence diagram can be further elaborated to illustrate interactions with external systems, like Shibboleth for authentication or Symplectic Elements, if those systems play a role in this process.